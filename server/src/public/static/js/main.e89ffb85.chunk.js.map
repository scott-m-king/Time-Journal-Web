{"version":3,"sources":["media/android_stock.jpg","accessToken.ts","generated/graphql.tsx","Forms/CalendarComponent.tsx","redux/actions.ts","components/Categories/NewCategoryDialog.tsx","Forms/CreateEntryForm.tsx","components/Dashboard/LineGraphWidget.tsx","components/Dashboard/TopFiveWidget.tsx","Functions/dataProcessing.ts","components/Categories/DeleteCategoryDialog.tsx","components/Categories/EditCategoryDialog.tsx","components/Categories/CategoryCard.tsx","components/Categories/CategoryLane.tsx","components/Categories/CategoryPieChart.tsx","components/Categories/CategoryTable.tsx","App/CategoryList.tsx","components/Categories/CategoryCalendar.tsx","components/Dashboard/TotalEntriesCard.tsx","components/Dashboard/EmojiCard.tsx","components/Dashboard/TotalMinutesCard.tsx","App/Dashboard.tsx","Forms/LoginForm.tsx","components/Layout/Header.tsx","layouts/Auth.tsx","Auth/Login.tsx","Forms/SignupForm.tsx","Auth/Signup.tsx","components/Layout/Sidebar.tsx","layouts/Body.tsx","styles/Colours.ts","components/JournalEntries/EntryTable.tsx","components/JournalEntries/UploadCSV.tsx","App/JournalEntries.tsx","Routes.tsx","App.tsx","redux/reducers/categoriesReducer.ts","redux/reducers/editEntryReducer.ts","redux/reducers/calendarReducer.ts","redux/reducers/themeReducer.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["module","exports","accessToken","setAccessToken","s","getAccessToken","BatchUploadJournalEntryDocument","gql","GetUserCategoriesDocument","useGetUserCategoriesQuery","baseOptions","Apollo","CreateCategoryDocument","CreateEntryDocument","useCreateEntryMutation","DeleteCategoryDocument","DeleteEntryDocument","EditCategoryDocument","EditEntryDocument","GetAllUserEntriesDocument","useGetAllUserEntriesQuery","LoginDocument","useLoginMutation","LogoutDocument","MeDocument","useMeQuery","RegisterUserDocument","UpdateUserThemeDocument","useStyles","makeStyles","theme","createStyles","cssOutlinedInput","color","palette","text","primary","notchedOutline","borderWidth","borderColor","main","CalendarComponent","props","useField","field","setFieldValue","useFormikContext","classes","useTheme","COLOR","secondary","defaultMaterialTheme","createMuiTheme","overrides","MuiOutlinedInput","root","position","MuiFormLabel","MuiPickersToolbar","toolbar","backgroundColor","light","MuiPickersDay","daySelected","MuiSvgIcon","fill","ThemeProvider","utils","DateFnsUtils","autoOk","name","inputVariant","variant","format","fullWidth","label","InputProps","InputLabelProps","style","onChange","val","margin","KeyboardButtonProps","InputAdornmentProps","setSelectedCategory","category","type","payload","setEntryToEdit","entry","NewCategoryDialog","isOpen","setIsOpen","React","useState","description","setDescription","createCategory","handleClose","handleSubmit","a","alert","variables","update","store","data","writeQuery","query","getUserCategories","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","e","target","value","DialogActions","Button","onClick","validationSchema","yup","duration","required","moreThan","title","textAlign","spacing","textField","width","selectBorder","CreateEntryForm","createGlobalStyle","onSubmit","onEdit","categories","setCategories","loading","date","Date","toDateString","categoryId","Infinity","notes","vals","setVals","editMode","setEditMode","dispatch","useDispatch","entryToEdit","useSelector","state","editEntry","addCategory","setAddCategory","reduce","arr","curr","Math","max","handleCancel","undefined","updatedEntry","initialValues","enableReinitialize","setSubmitting","resetForm","isSubmitting","className","Grid","container","item","xs","FormControl","InputLabel","as","Select","map","index","MenuItem","key","endAdornment","InputAdornment","multiline","rows","justify","disabled","whiteSpace","LineGraphWidget","muiTheme","meData","colors","setColors","active","setActive","textColor","isLightTheme","me","top","right","bottom","left","xScale","yScale","min","stacked","reverse","axisTop","axisRight","curve","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","scheme","pointSize","pointColor","pointBorderWidth","enableSlices","sliceTooltip","slice","Card","padding","blueGrey","points","point","display","alignItems","fontSize","serieColor","serieId","yFormatted","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","itemTextColor","symbolSize","symbolShape","symbolBorderColor","d","colorList","series","effects","on","itemBackground","Typography","justifyContent","paddingTop","inline","hover","TopFiveWidget","categoryList","topFive","setTopFive","totalDuration","setTotalDuration","useEffect","length","sort","x","y","acc","List","to","textDecoration","catId","cat","find","handleClick","CircularProgress","TopFiveItem","ListItem","ListItemAvatar","Avatar","aria-label","charAt","toUpperCase","ListItemText","Fragment","component","floor","round","Divider","getCurrentDayTimestamp","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","toISOString","months","getAmount","parsed","month","hello","filter","cur","sortByCategory","entries","tempEntries","tempCategories","push","b","result","counter","resultEntries","populateCalendar","days","Map","i","has","set","get","forEach","day","DeleteCategoryDialog","deleteCategory","handleDelete","getAllUserEntries","handleCloseDelete","aria-describedby","EditCategoryDialog","editCategory","updatedDescription","setUpdatedDescription","handleEdit","handleCloseEdit","cursor","pos","marginBottom","expand","transform","marginLeft","transition","transitions","create","shortest","expandOpen","CategoryCard","anchorEl","setAnchorEl","expanded","setExpanded","openDeleteDialog","setOpenDeleteDialog","openEditDialog","setOpenEditDialog","activeCategory","percentageFill","barDuration","CardHeader","background","paper","avatar","action","IconButton","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","Boolean","clsx","setActiveCategory","aria-expanded","Collapse","in","timeout","unmountOnExit","CardContent","toFixed","CategoryLane","windowHeight","setWindowHeight","MAX_HEIGHT","setBarDuration","window","addEventListener","updateWindowDimensions","rsf","currentValue","innerHeight","maxHeight","overflow","element","CategoryPieChart","setFill","chartData","setChartData","updatedData","updateActiveCategory","selectedCategory","fillArray","match","toString","height","innerRadius","padAngle","cornerRadius","modifiers","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","animate","motionStiffness","motionDamping","defs","offset","CategoryTable","setRows","loadData","allRows","elem","filteredRows","filteredEntry","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","row","scope","flexGrow","button","CategoryList","calendarView","view","entryLoading","entryData","categoryLoading","categoryData","onSelectCategory","startIcon","sm","md","lg","xl","FormControlLabel","control","Switch","checked","start","end","CategoryCalendar","setData","tooltip","filteredEntries","emptyColor","yearSpacing","monthBorderColor","default","dayBorderWidth","dayBorderColor","itemCount","TotalEntriesCard","numEntries","dashboardStyles","cards","bot","EmojiCard","emoji","setEmoji","fetchData","fetch","then","response","json","String","fromCodePoint","parseInt","split","join","size","TotalMinutesCard","bullet","marginTop","headers","paddingLeft","widgets","paddingBottom","Layout","styled","div","Dashboard","createEntry","calendarData","setCalendarData","setNumEntries","totalMinutes","setTotalMinutes","obj","j","generateLineGraphData","num","firstName","email","password","MyTextField","placeholder","meta","errorText","error","touched","helperText","LoginForm","appBar","zIndex","drawer","menuButton","marginRight","Header","logout","client","setChecked","useUpdateUserThemeMutation","updateTheme","body","handleChange","changeTheme","hack","updateUserTheme","lastName","console","log","AppBar","Toolbar","resetStore","location","href","Root","gridContainer","android_stock","backgroundRepeat","backgroundSize","gridItem","Auth","children","page","CssBaseline","Hidden","only","overflowY","maxWidth","Login","history","login","handleLogin","user","passwordRepeat","oneOf","signupStyles","SignupForm","Signup","register","handleRegister","loginResponse","flexShrink","drawerPaper","drawerContainer","link","iconic","Sidebar","routes1","routes2","Drawer","ListItemIcon","icons","GlobalStyle","Body","Colours","EntryTable","setEntries","edit","setEdit","deleteEntry","columns","options","customBodyRender","tableMeta","updateValue","Chip","deletingItems","setDeletingItems","elevation","print","onRowsDelete","reversedEntries","toDelete","dataIndex","textLabels","noMatch","customSort","rowIndex","getTime","catA","catB","charCodeAt","idArray","fillTable","final","loadingComponent","input","UploadCSV","values","setValues","batchUpload","parsedArray","str","phrase","concat","temp","entryArray","uploadFileToServer","categoryArray","batchUploadJournalEntry","accept","multiple","files","csvFile","reader","FileReader","onload","readAsText","htmlFor","Alert","CreateEntry","setOpen","reason","Snackbar","autoHideDuration","severity","lightTheme","darkTheme","cyan","Routes","setTheme","exact","path","render","App","loadPage","setLoadPage","method","credentials","initialState","rootReducer","combineReducers","createStore","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","subscribe","next","bind","complete","catch","unsubscribe","ApolloClient","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","jwtDecode","now","fetchAccessToken","handleFetch","handleError","err","warn","onError","graphQLErrors","networkError","message","pathname","HttpLink","uri","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e89ffb85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/android_stock.560e2e8c.jpg\";","let accessToken = \"\"; // should use this with a global state management library\n\nexport const setAccessToken = (s: string) => {\n  accessToken = s;\n}\n\nexport const getAccessToken = () => {\n  return accessToken;\n}","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  users: Array<User>;\n  findUser: User;\n  me?: Maybe<User>;\n  getAllUserEntries: Array<JournalEntry>;\n  getEntriesByCategory: Array<JournalEntry>;\n  getUserCategories: Array<Category>;\n  getSingleCategory: Category;\n};\n\n\nexport type QueryFindUserArgs = {\n  userId: Scalars['Int'];\n};\n\n\nexport type QueryGetEntriesByCategoryArgs = {\n  categoryId: Scalars['Int'];\n  userId: Scalars['Int'];\n};\n\n\nexport type QueryGetSingleCategoryArgs = {\n  categoryId: Scalars['Int'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  email: Scalars['String'];\n  theme: Scalars['String'];\n  categories: Array<Category>;\n  entries: Array<JournalEntry>;\n};\n\nexport type Category = {\n  __typename?: 'Category';\n  id: Scalars['Int'];\n  description: Scalars['String'];\n  duration: Scalars['Int'];\n  entries?: Maybe<Array<JournalEntry>>;\n};\n\nexport type JournalEntry = {\n  __typename?: 'JournalEntry';\n  id: Scalars['Int'];\n  date: Scalars['String'];\n  title: Scalars['String'];\n  duration: Scalars['Int'];\n  notes?: Maybe<Scalars['String']>;\n  categoryId: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  login: LoginResponse;\n  logout: Scalars['Boolean'];\n  registerUser: User;\n  updateUserTheme: User;\n  createEntry: JournalCategoryResponse;\n  batchUploadJournalEntry: JournalCategoryResponse;\n  deleteEntry: JournalCategoryResponse;\n  editEntry: JournalCategoryResponse;\n  createCategory: Array<Category>;\n  deleteCategory: JournalCategoryResponse;\n  editCategory: JournalCategoryResponse;\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterUserArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n  lastName?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n};\n\n\nexport type MutationUpdateUserThemeArgs = {\n  theme: Scalars['String'];\n};\n\n\nexport type MutationCreateEntryArgs = {\n  date: Scalars['String'];\n  duration: Scalars['Int'];\n  notes?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  categoryId: Scalars['Int'];\n};\n\n\nexport type MutationBatchUploadJournalEntryArgs = {\n  categoryArray: Array<Scalars['String']>;\n  entryArray: Array<EntryInput>;\n};\n\n\nexport type MutationDeleteEntryArgs = {\n  idArray: Array<Scalars['Int']>;\n};\n\n\nexport type MutationEditEntryArgs = {\n  date: Scalars['String'];\n  duration: Scalars['Int'];\n  notes?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  categoryId: Scalars['Int'];\n  id: Scalars['Int'];\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  description: Scalars['String'];\n};\n\n\nexport type MutationDeleteCategoryArgs = {\n  categoryId: Scalars['Int'];\n};\n\n\nexport type MutationEditCategoryArgs = {\n  updatedDescription: Scalars['String'];\n  categoryId: Scalars['Int'];\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n  user: User;\n};\n\nexport type JournalCategoryResponse = {\n  __typename?: 'JournalCategoryResponse';\n  entries: Array<JournalEntry>;\n  categories: Array<Category>;\n};\n\nexport type EntryInput = {\n  id: Scalars['Int'];\n  date: Scalars['String'];\n  title: Scalars['String'];\n  duration: Scalars['Int'];\n  notes?: Maybe<Scalars['String']>;\n  categoryId: Scalars['Int'];\n};\n\nexport type BatchUploadJournalEntryMutationVariables = Exact<{\n  entryArray: Array<EntryInput>;\n  categoryArray: Array<Scalars['String']>;\n}>;\n\n\nexport type BatchUploadJournalEntryMutation = (\n  { __typename?: 'Mutation' }\n  & { batchUploadJournalEntry: (\n    { __typename?: 'JournalCategoryResponse' }\n    & { entries: Array<(\n      { __typename?: 'JournalEntry' }\n      & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n    )>, categories: Array<(\n      { __typename?: 'Category' }\n      & Pick<Category, 'id' | 'description' | 'duration'>\n    )> }\n  ) }\n);\n\nexport type GetUserCategoriesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUserCategoriesQuery = (\n  { __typename?: 'Query' }\n  & { getUserCategories: Array<(\n    { __typename?: 'Category' }\n    & Pick<Category, 'id' | 'description' | 'duration'>\n  )> }\n);\n\nexport type CreateCategoryMutationVariables = Exact<{\n  description: Scalars['String'];\n}>;\n\n\nexport type CreateCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { createCategory: Array<(\n    { __typename?: 'Category' }\n    & Pick<Category, 'id' | 'description' | 'duration'>\n  )> }\n);\n\nexport type CreateEntryMutationVariables = Exact<{\n  categoryId: Scalars['Int'];\n  title: Scalars['String'];\n  notes?: Maybe<Scalars['String']>;\n  duration: Scalars['Int'];\n  date: Scalars['String'];\n}>;\n\n\nexport type CreateEntryMutation = (\n  { __typename?: 'Mutation' }\n  & { createEntry: (\n    { __typename?: 'JournalCategoryResponse' }\n    & { entries: Array<(\n      { __typename?: 'JournalEntry' }\n      & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n    )>, categories: Array<(\n      { __typename?: 'Category' }\n      & Pick<Category, 'id' | 'description' | 'duration'>\n    )> }\n  ) }\n);\n\nexport type DeleteCategoryMutationVariables = Exact<{\n  categoryId: Scalars['Int'];\n}>;\n\n\nexport type DeleteCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteCategory: (\n    { __typename?: 'JournalCategoryResponse' }\n    & { entries: Array<(\n      { __typename?: 'JournalEntry' }\n      & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n    )>, categories: Array<(\n      { __typename?: 'Category' }\n      & Pick<Category, 'id' | 'description' | 'duration'>\n    )> }\n  ) }\n);\n\nexport type DeleteEntryMutationVariables = Exact<{\n  idArray: Array<Scalars['Int']>;\n}>;\n\n\nexport type DeleteEntryMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteEntry: (\n    { __typename?: 'JournalCategoryResponse' }\n    & { entries: Array<(\n      { __typename?: 'JournalEntry' }\n      & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n    )>, categories: Array<(\n      { __typename?: 'Category' }\n      & Pick<Category, 'id' | 'description' | 'duration'>\n    )> }\n  ) }\n);\n\nexport type EditCategoryMutationVariables = Exact<{\n  categoryId: Scalars['Int'];\n  updatedDescription: Scalars['String'];\n}>;\n\n\nexport type EditCategoryMutation = (\n  { __typename?: 'Mutation' }\n  & { editCategory: (\n    { __typename?: 'JournalCategoryResponse' }\n    & { entries: Array<(\n      { __typename?: 'JournalEntry' }\n      & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n    )>, categories: Array<(\n      { __typename?: 'Category' }\n      & Pick<Category, 'id' | 'description' | 'duration'>\n    )> }\n  ) }\n);\n\nexport type EditEntryMutationVariables = Exact<{\n  id: Scalars['Int'];\n  categoryId: Scalars['Int'];\n  title: Scalars['String'];\n  notes?: Maybe<Scalars['String']>;\n  duration: Scalars['Int'];\n  date: Scalars['String'];\n}>;\n\n\nexport type EditEntryMutation = (\n  { __typename?: 'Mutation' }\n  & { editEntry: (\n    { __typename?: 'JournalCategoryResponse' }\n    & { entries: Array<(\n      { __typename?: 'JournalEntry' }\n      & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n    )>, categories: Array<(\n      { __typename?: 'Category' }\n      & Pick<Category, 'id' | 'description' | 'duration'>\n    )> }\n  ) }\n);\n\nexport type GetAllUserEntriesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAllUserEntriesQuery = (\n  { __typename?: 'Query' }\n  & { getAllUserEntries: Array<(\n    { __typename?: 'JournalEntry' }\n    & Pick<JournalEntry, 'id' | 'title' | 'notes' | 'duration' | 'date' | 'categoryId'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'firstName' | 'lastName' | 'email' | 'theme'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'firstName' | 'lastName' | 'email' | 'theme'>\n  )> }\n);\n\nexport type RegisterUserMutationVariables = Exact<{\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type RegisterUserMutation = (\n  { __typename?: 'Mutation' }\n  & { registerUser: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\n  ) }\n);\n\nexport type UpdateUserThemeMutationVariables = Exact<{\n  theme: Scalars['String'];\n}>;\n\n\nexport type UpdateUserThemeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateUserTheme: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'firstName' | 'lastName' | 'theme'>\n  ) }\n);\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'firstName' | 'lastName' | 'email'>\n  )> }\n);\n\n\nexport const BatchUploadJournalEntryDocument = gql`\n    mutation batchUploadJournalEntry($entryArray: [EntryInput!]!, $categoryArray: [String!]!) {\n  batchUploadJournalEntry(entryArray: $entryArray, categoryArray: $categoryArray) {\n    entries {\n      id\n      title\n      notes\n      duration\n      date\n      categoryId\n    }\n    categories {\n      id\n      description\n      duration\n    }\n  }\n}\n    `;\nexport type BatchUploadJournalEntryMutationFn = Apollo.MutationFunction<BatchUploadJournalEntryMutation, BatchUploadJournalEntryMutationVariables>;\n\n/**\n * __useBatchUploadJournalEntryMutation__\n *\n * To run a mutation, you first call `useBatchUploadJournalEntryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useBatchUploadJournalEntryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [batchUploadJournalEntryMutation, { data, loading, error }] = useBatchUploadJournalEntryMutation({\n *   variables: {\n *      entryArray: // value for 'entryArray'\n *      categoryArray: // value for 'categoryArray'\n *   },\n * });\n */\nexport function useBatchUploadJournalEntryMutation(baseOptions?: Apollo.MutationHookOptions<BatchUploadJournalEntryMutation, BatchUploadJournalEntryMutationVariables>) {\n        return Apollo.useMutation<BatchUploadJournalEntryMutation, BatchUploadJournalEntryMutationVariables>(BatchUploadJournalEntryDocument, baseOptions);\n      }\nexport type BatchUploadJournalEntryMutationHookResult = ReturnType<typeof useBatchUploadJournalEntryMutation>;\nexport type BatchUploadJournalEntryMutationResult = Apollo.MutationResult<BatchUploadJournalEntryMutation>;\nexport type BatchUploadJournalEntryMutationOptions = Apollo.BaseMutationOptions<BatchUploadJournalEntryMutation, BatchUploadJournalEntryMutationVariables>;\nexport const GetUserCategoriesDocument = gql`\n    query getUserCategories {\n  getUserCategories {\n    id\n    description\n    duration\n  }\n}\n    `;\n\n/**\n * __useGetUserCategoriesQuery__\n *\n * To run a query within a React component, call `useGetUserCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserCategoriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUserCategoriesQuery(baseOptions?: Apollo.QueryHookOptions<GetUserCategoriesQuery, GetUserCategoriesQueryVariables>) {\n        return Apollo.useQuery<GetUserCategoriesQuery, GetUserCategoriesQueryVariables>(GetUserCategoriesDocument, baseOptions);\n      }\nexport function useGetUserCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserCategoriesQuery, GetUserCategoriesQueryVariables>) {\n          return Apollo.useLazyQuery<GetUserCategoriesQuery, GetUserCategoriesQueryVariables>(GetUserCategoriesDocument, baseOptions);\n        }\nexport type GetUserCategoriesQueryHookResult = ReturnType<typeof useGetUserCategoriesQuery>;\nexport type GetUserCategoriesLazyQueryHookResult = ReturnType<typeof useGetUserCategoriesLazyQuery>;\nexport type GetUserCategoriesQueryResult = Apollo.QueryResult<GetUserCategoriesQuery, GetUserCategoriesQueryVariables>;\nexport const CreateCategoryDocument = gql`\n    mutation createCategory($description: String!) {\n  createCategory(description: $description) {\n    id\n    description\n    duration\n  }\n}\n    `;\nexport type CreateCategoryMutationFn = Apollo.MutationFunction<CreateCategoryMutation, CreateCategoryMutationVariables>;\n\n/**\n * __useCreateCategoryMutation__\n *\n * To run a mutation, you first call `useCreateCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCategoryMutation, { data, loading, error }] = useCreateCategoryMutation({\n *   variables: {\n *      description: // value for 'description'\n *   },\n * });\n */\nexport function useCreateCategoryMutation(baseOptions?: Apollo.MutationHookOptions<CreateCategoryMutation, CreateCategoryMutationVariables>) {\n        return Apollo.useMutation<CreateCategoryMutation, CreateCategoryMutationVariables>(CreateCategoryDocument, baseOptions);\n      }\nexport type CreateCategoryMutationHookResult = ReturnType<typeof useCreateCategoryMutation>;\nexport type CreateCategoryMutationResult = Apollo.MutationResult<CreateCategoryMutation>;\nexport type CreateCategoryMutationOptions = Apollo.BaseMutationOptions<CreateCategoryMutation, CreateCategoryMutationVariables>;\nexport const CreateEntryDocument = gql`\n    mutation createEntry($categoryId: Int!, $title: String!, $notes: String, $duration: Int!, $date: String!) {\n  createEntry(categoryId: $categoryId, title: $title, notes: $notes, duration: $duration, date: $date) {\n    entries {\n      id\n      title\n      notes\n      duration\n      date\n      categoryId\n    }\n    categories {\n      id\n      description\n      duration\n    }\n  }\n}\n    `;\nexport type CreateEntryMutationFn = Apollo.MutationFunction<CreateEntryMutation, CreateEntryMutationVariables>;\n\n/**\n * __useCreateEntryMutation__\n *\n * To run a mutation, you first call `useCreateEntryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateEntryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createEntryMutation, { data, loading, error }] = useCreateEntryMutation({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *      title: // value for 'title'\n *      notes: // value for 'notes'\n *      duration: // value for 'duration'\n *      date: // value for 'date'\n *   },\n * });\n */\nexport function useCreateEntryMutation(baseOptions?: Apollo.MutationHookOptions<CreateEntryMutation, CreateEntryMutationVariables>) {\n        return Apollo.useMutation<CreateEntryMutation, CreateEntryMutationVariables>(CreateEntryDocument, baseOptions);\n      }\nexport type CreateEntryMutationHookResult = ReturnType<typeof useCreateEntryMutation>;\nexport type CreateEntryMutationResult = Apollo.MutationResult<CreateEntryMutation>;\nexport type CreateEntryMutationOptions = Apollo.BaseMutationOptions<CreateEntryMutation, CreateEntryMutationVariables>;\nexport const DeleteCategoryDocument = gql`\n    mutation deleteCategory($categoryId: Int!) {\n  deleteCategory(categoryId: $categoryId) {\n    entries {\n      id\n      title\n      notes\n      duration\n      date\n      categoryId\n    }\n    categories {\n      id\n      description\n      duration\n    }\n  }\n}\n    `;\nexport type DeleteCategoryMutationFn = Apollo.MutationFunction<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\n\n/**\n * __useDeleteCategoryMutation__\n *\n * To run a mutation, you first call `useDeleteCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteCategoryMutation, { data, loading, error }] = useDeleteCategoryMutation({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *   },\n * });\n */\nexport function useDeleteCategoryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>) {\n        return Apollo.useMutation<DeleteCategoryMutation, DeleteCategoryMutationVariables>(DeleteCategoryDocument, baseOptions);\n      }\nexport type DeleteCategoryMutationHookResult = ReturnType<typeof useDeleteCategoryMutation>;\nexport type DeleteCategoryMutationResult = Apollo.MutationResult<DeleteCategoryMutation>;\nexport type DeleteCategoryMutationOptions = Apollo.BaseMutationOptions<DeleteCategoryMutation, DeleteCategoryMutationVariables>;\nexport const DeleteEntryDocument = gql`\n    mutation deleteEntry($idArray: [Int!]!) {\n  deleteEntry(idArray: $idArray) {\n    entries {\n      id\n      title\n      notes\n      duration\n      date\n      categoryId\n    }\n    categories {\n      id\n      description\n      duration\n    }\n  }\n}\n    `;\nexport type DeleteEntryMutationFn = Apollo.MutationFunction<DeleteEntryMutation, DeleteEntryMutationVariables>;\n\n/**\n * __useDeleteEntryMutation__\n *\n * To run a mutation, you first call `useDeleteEntryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteEntryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteEntryMutation, { data, loading, error }] = useDeleteEntryMutation({\n *   variables: {\n *      idArray: // value for 'idArray'\n *   },\n * });\n */\nexport function useDeleteEntryMutation(baseOptions?: Apollo.MutationHookOptions<DeleteEntryMutation, DeleteEntryMutationVariables>) {\n        return Apollo.useMutation<DeleteEntryMutation, DeleteEntryMutationVariables>(DeleteEntryDocument, baseOptions);\n      }\nexport type DeleteEntryMutationHookResult = ReturnType<typeof useDeleteEntryMutation>;\nexport type DeleteEntryMutationResult = Apollo.MutationResult<DeleteEntryMutation>;\nexport type DeleteEntryMutationOptions = Apollo.BaseMutationOptions<DeleteEntryMutation, DeleteEntryMutationVariables>;\nexport const EditCategoryDocument = gql`\n    mutation editCategory($categoryId: Int!, $updatedDescription: String!) {\n  editCategory(categoryId: $categoryId, updatedDescription: $updatedDescription) {\n    entries {\n      id\n      title\n      notes\n      duration\n      date\n      categoryId\n    }\n    categories {\n      id\n      description\n      duration\n    }\n  }\n}\n    `;\nexport type EditCategoryMutationFn = Apollo.MutationFunction<EditCategoryMutation, EditCategoryMutationVariables>;\n\n/**\n * __useEditCategoryMutation__\n *\n * To run a mutation, you first call `useEditCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editCategoryMutation, { data, loading, error }] = useEditCategoryMutation({\n *   variables: {\n *      categoryId: // value for 'categoryId'\n *      updatedDescription: // value for 'updatedDescription'\n *   },\n * });\n */\nexport function useEditCategoryMutation(baseOptions?: Apollo.MutationHookOptions<EditCategoryMutation, EditCategoryMutationVariables>) {\n        return Apollo.useMutation<EditCategoryMutation, EditCategoryMutationVariables>(EditCategoryDocument, baseOptions);\n      }\nexport type EditCategoryMutationHookResult = ReturnType<typeof useEditCategoryMutation>;\nexport type EditCategoryMutationResult = Apollo.MutationResult<EditCategoryMutation>;\nexport type EditCategoryMutationOptions = Apollo.BaseMutationOptions<EditCategoryMutation, EditCategoryMutationVariables>;\nexport const EditEntryDocument = gql`\n    mutation editEntry($id: Int!, $categoryId: Int!, $title: String!, $notes: String, $duration: Int!, $date: String!) {\n  editEntry(id: $id, categoryId: $categoryId, title: $title, duration: $duration, date: $date, notes: $notes) {\n    entries {\n      id\n      title\n      notes\n      duration\n      date\n      categoryId\n    }\n    categories {\n      id\n      description\n      duration\n    }\n  }\n}\n    `;\nexport type EditEntryMutationFn = Apollo.MutationFunction<EditEntryMutation, EditEntryMutationVariables>;\n\n/**\n * __useEditEntryMutation__\n *\n * To run a mutation, you first call `useEditEntryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useEditEntryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [editEntryMutation, { data, loading, error }] = useEditEntryMutation({\n *   variables: {\n *      id: // value for 'id'\n *      categoryId: // value for 'categoryId'\n *      title: // value for 'title'\n *      notes: // value for 'notes'\n *      duration: // value for 'duration'\n *      date: // value for 'date'\n *   },\n * });\n */\nexport function useEditEntryMutation(baseOptions?: Apollo.MutationHookOptions<EditEntryMutation, EditEntryMutationVariables>) {\n        return Apollo.useMutation<EditEntryMutation, EditEntryMutationVariables>(EditEntryDocument, baseOptions);\n      }\nexport type EditEntryMutationHookResult = ReturnType<typeof useEditEntryMutation>;\nexport type EditEntryMutationResult = Apollo.MutationResult<EditEntryMutation>;\nexport type EditEntryMutationOptions = Apollo.BaseMutationOptions<EditEntryMutation, EditEntryMutationVariables>;\nexport const GetAllUserEntriesDocument = gql`\n    query getAllUserEntries {\n  getAllUserEntries {\n    id\n    title\n    notes\n    duration\n    date\n    categoryId\n  }\n}\n    `;\n\n/**\n * __useGetAllUserEntriesQuery__\n *\n * To run a query within a React component, call `useGetAllUserEntriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllUserEntriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllUserEntriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAllUserEntriesQuery(baseOptions?: Apollo.QueryHookOptions<GetAllUserEntriesQuery, GetAllUserEntriesQueryVariables>) {\n        return Apollo.useQuery<GetAllUserEntriesQuery, GetAllUserEntriesQueryVariables>(GetAllUserEntriesDocument, baseOptions);\n      }\nexport function useGetAllUserEntriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllUserEntriesQuery, GetAllUserEntriesQueryVariables>) {\n          return Apollo.useLazyQuery<GetAllUserEntriesQuery, GetAllUserEntriesQueryVariables>(GetAllUserEntriesDocument, baseOptions);\n        }\nexport type GetAllUserEntriesQueryHookResult = ReturnType<typeof useGetAllUserEntriesQuery>;\nexport type GetAllUserEntriesLazyQueryHookResult = ReturnType<typeof useGetAllUserEntriesLazyQuery>;\nexport type GetAllUserEntriesQueryResult = Apollo.QueryResult<GetAllUserEntriesQuery, GetAllUserEntriesQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    user {\n      id\n      firstName\n      lastName\n      email\n      theme\n    }\n    accessToken\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    firstName\n    lastName\n    email\n    theme\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterUserDocument = gql`\n    mutation registerUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n  registerUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n    id\n    firstName\n    lastName\n    email\n  }\n}\n    `;\nexport type RegisterUserMutationFn = Apollo.MutationFunction<RegisterUserMutation, RegisterUserMutationVariables>;\n\n/**\n * __useRegisterUserMutation__\n *\n * To run a mutation, you first call `useRegisterUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerUserMutation, { data, loading, error }] = useRegisterUserMutation({\n *   variables: {\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterUserMutation(baseOptions?: Apollo.MutationHookOptions<RegisterUserMutation, RegisterUserMutationVariables>) {\n        return Apollo.useMutation<RegisterUserMutation, RegisterUserMutationVariables>(RegisterUserDocument, baseOptions);\n      }\nexport type RegisterUserMutationHookResult = ReturnType<typeof useRegisterUserMutation>;\nexport type RegisterUserMutationResult = Apollo.MutationResult<RegisterUserMutation>;\nexport type RegisterUserMutationOptions = Apollo.BaseMutationOptions<RegisterUserMutation, RegisterUserMutationVariables>;\nexport const UpdateUserThemeDocument = gql`\n    mutation updateUserTheme($theme: String!) {\n  updateUserTheme(theme: $theme) {\n    id\n    email\n    firstName\n    lastName\n    theme\n  }\n}\n    `;\nexport type UpdateUserThemeMutationFn = Apollo.MutationFunction<UpdateUserThemeMutation, UpdateUserThemeMutationVariables>;\n\n/**\n * __useUpdateUserThemeMutation__\n *\n * To run a mutation, you first call `useUpdateUserThemeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserThemeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserThemeMutation, { data, loading, error }] = useUpdateUserThemeMutation({\n *   variables: {\n *      theme: // value for 'theme'\n *   },\n * });\n */\nexport function useUpdateUserThemeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserThemeMutation, UpdateUserThemeMutationVariables>) {\n        return Apollo.useMutation<UpdateUserThemeMutation, UpdateUserThemeMutationVariables>(UpdateUserThemeDocument, baseOptions);\n      }\nexport type UpdateUserThemeMutationHookResult = ReturnType<typeof useUpdateUserThemeMutation>;\nexport type UpdateUserThemeMutationResult = Apollo.MutationResult<UpdateUserThemeMutation>;\nexport type UpdateUserThemeMutationOptions = Apollo.BaseMutationOptions<UpdateUserThemeMutation, UpdateUserThemeMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    firstName\n    lastName\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, baseOptions);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;","import React from \"react\";\nimport {\n  createMuiTheme,\n  useTheme,\n  makeStyles,\n  Theme,\n  createStyles,\n} from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { useField, useFormikContext, FieldAttributes } from \"formik\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersOverrides } from \"@material-ui/pickers/typings/overrides\";\n\ntype overridesNameToClassKey = {\n  [P in keyof MuiPickersOverrides]: keyof MuiPickersOverrides[P];\n};\n\ndeclare module \"@material-ui/core/styles/overrides\" {\n  export interface ComponentNameToClassKey extends overridesNameToClassKey {}\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    cssOutlinedInput: {\n      color: theme.palette.text.primary,\n    },\n    notchedOutline: {\n      borderWidth: \"1px\",\n      borderColor: `${theme.palette.primary.main}`,\n    },\n  })\n);\n\nexport const CalendarComponent: React.FC<FieldAttributes<{}>> = ({\n  ...props\n}) => {\n  const [field] = useField<{}>(props);\n  const { setFieldValue } = useFormikContext();\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const COLOR = theme.palette.text.secondary;\n\n  // https://stackoverflow.com/questions/53764626/how-to-change-outline-color-of-material-ui-react-input-component\n  const defaultMaterialTheme = createMuiTheme({\n    overrides: {\n      MuiOutlinedInput: {\n        root: {\n          position: \"relative\",\n          \"&:hover:not($disabled):not($focused):not($error) $notchedOutline\": {\n            borderColor: COLOR,\n          },\n          \"&$focused $notchedOutline\": {\n            borderColor: theme.palette.primary.main,\n            borderWidth: 2,\n          },\n        },\n      },\n      MuiFormLabel: {\n        root: {\n          \"&$focused\": {\n            color: theme.palette.primary.main,\n          },\n        },\n      },\n      MuiPickersToolbar: {\n        toolbar: {\n          backgroundColor: theme.palette.secondary.light,\n        },\n      },\n      MuiPickersDay: {\n        daySelected: {\n          backgroundColor: theme.palette.secondary.main,\n        },\n      },\n      MuiSvgIcon: {\n        root: {\n          fill: COLOR,\n        },\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={defaultMaterialTheme}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          {...field}\n          autoOk\n          name=\"date\"\n          inputVariant=\"outlined\"\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          fullWidth\n          label=\"Date\"\n          InputProps={{\n            classes: {\n              root: classes.cssOutlinedInput,\n              notchedOutline: classes.notchedOutline,\n            },\n          }}\n          InputLabelProps={{\n            style: { color: theme.palette.text.secondary },\n          }}\n          onChange={(val) => setFieldValue(field.name, val)}\n          margin=\"normal\"\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\",\n          }}\n          InputAdornmentProps={{ position: \"start\" }}\n        />\n      </MuiPickersUtilsProvider>\n    </ThemeProvider>\n  );\n};\n","import { Category, JournalEntry } from \"./types\";\n\nexport type SetSelectedCategoryAction = {\n  type: `SET_SELECTED_CATEGORY`;\n  payload: Category | undefined;\n};\n\nexport const setSelectedCategory = (\n  category: Category | undefined\n): SetSelectedCategoryAction => ({\n  type: \"SET_SELECTED_CATEGORY\",\n  payload: category,\n});\n\nexport type SetEntryToEditAction = {\n  type: `SET_ENTRY_TO_EDIT`;\n  payload: JournalEntry | undefined;\n};\n\nexport const setEntryToEdit = (\n  entry: JournalEntry | undefined\n): SetEntryToEditAction => ({\n  type: \"SET_ENTRY_TO_EDIT\",\n  payload: entry,\n});\n\nexport type SetCalendarViewAction = {\n  type: `SET_CALENDAR_VIEW`;\n  payload: boolean;\n};\n\nexport const setCalendarView = (view: boolean): SetCalendarViewAction => ({\n  type: \"SET_CALENDAR_VIEW\",\n  payload: view,\n});\n\nexport type SetThemeAction = {\n  type: `SET_THEME`;\n  payload: boolean;\n};\n\nexport const setTheme = (theme: boolean): SetThemeAction => ({\n  type: \"SET_THEME\",\n  payload: theme,\n});\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport {\n  useCreateCategoryMutation,\n  GetUserCategoriesQuery,\n  GetUserCategoriesDocument,\n} from \"../../generated/graphql\";\n\ninterface NewCategoryDialogProps {\n  isOpen: boolean;\n  setIsOpen: (bool: boolean) => void;\n}\n\nexport const NewCategoryDialog: React.FC<NewCategoryDialogProps> = ({\n  isOpen,\n  setIsOpen,\n}) => {\n  const [description, setDescription] = React.useState(\"\");\n  const [createCategory] = useCreateCategoryMutation();\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    if (description === \"\") {\n      alert(\"You must enter a name for your category\");\n      return;\n    }\n\n    try {\n      await createCategory({\n        variables: {\n          description: description,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.createCategory,\n            },\n          });\n        },\n      });\n    } catch (err) {\n      alert(err);\n    }\n    handleClose();\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Create New Category</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To create a new category, enter the title below. This category will\n            be initialized with 0 minutes and no entries.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"description\"\n            label=\"Category Title\"\n            type=\"input\"\n            onChange={(e) => setDescription(e.target.value)}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","import \"date-fns\";\nimport Button from \"@material-ui/core/Button\";\nimport { Form, Formik, Field } from \"formik\";\nimport * as React from \"react\";\nimport {\n  TextField,\n  Grid,\n  makeStyles,\n  createStyles,\n  Theme,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { useGetUserCategoriesQuery } from \"../generated/graphql\";\nimport { JournalEntry } from \"../redux/types\";\nimport { CalendarComponent } from \"./CalendarComponent\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../redux/reducers\";\nimport { setEntryToEdit } from \"../redux/actions\";\nimport { NewCategoryDialog } from \"../components/Categories/NewCategoryDialog\";\nimport { createGlobalStyle } from \"styled-components\";\n\ninterface Category {\n  id: number;\n  description: string;\n  duration: number;\n}\n\ninterface Props {\n  onSubmit: (values: JournalEntry) => Promise<void>;\n  onEdit: (id: number, values: JournalEntry) => Promise<void>;\n}\n\nconst validationSchema = yup.object({\n  duration: yup.number().required(\"Duration must be filled out.\").moreThan(0),\n  title: yup.string().required(\"Entry must have a title.\"),\n});\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      textAlign: \"center\",\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    textField: {\n      width: \"25ch\",\n    },\n    cssOutlinedInput: {\n      \"&$notchedOutline\": {\n        borderColor: `${theme.palette.primary.main}`,\n      },\n    },\n    notchedOutline: {\n      borderWidth: \"1px\",\n      borderColor: `${theme.palette.primary.main}`,\n    },\n    selectBorder: {\n      \"& .MuiOutlinedInput-notchedOutline\": {\n        borderColor: `${theme.palette.primary.main}`,\n      },\n    },\n  })\n);\n\nconst SelectStyle = createGlobalStyle`\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n`;\n\nexport const CreateEntryForm: React.FC<Props> = ({ onSubmit, onEdit }) => {\n  const classes = useStyles();\n  const [categories, setCategories] = React.useState<Array<Category>>([]);\n  const { data, loading } = useGetUserCategoriesQuery();\n  const [vals, setVals] = React.useState<JournalEntry>({\n    date: new Date().toDateString(),\n    categoryId: Infinity,\n    duration: 0,\n    title: \"\",\n    notes: \"\",\n  });\n  const [editMode, setEditMode] = React.useState<boolean>(false);\n  const dispatch = useDispatch();\n  const entryToEdit = useSelector(\n    (state: RootState) => state.editEntry.editEntry\n  );\n  const [addCategory, setAddCategory] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!loading && data && data.getUserCategories) {\n      setCategories(data.getUserCategories);\n\n      setVals({\n        date: new Date().toDateString(),\n        categoryId: data.getUserCategories.reduce((arr, curr) => ({\n          description: \"\",\n          duration: 0,\n          id: Math.max(arr.id, curr.id),\n        })).id,\n        duration: 0,\n        title: \"\",\n        notes: \"\",\n      });\n    }\n  }, [data]);\n\n  React.useEffect(() => {\n    if (entryToEdit) {\n      setVals({\n        date: entryToEdit.date,\n        categoryId: entryToEdit.categoryId,\n        duration: entryToEdit.duration,\n        title: entryToEdit.title,\n        notes: entryToEdit.notes,\n      });\n      setEditMode(true);\n    }\n  }, [entryToEdit, data]);\n\n  const handleCancel = () => {\n    setEditMode(false);\n    setVals({\n      date: new Date().toDateString(),\n      categoryId: data!.getUserCategories[0].id,\n      duration: 0,\n      title: \"\",\n      notes: \"\",\n    });\n    dispatch(setEntryToEdit(undefined));\n  };\n\n  const editEntry = async (updatedEntry: JournalEntry) => {\n    onEdit(entryToEdit!.id!, updatedEntry);\n    handleCancel();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={vals}\n        validationSchema={validationSchema}\n        enableReinitialize\n        onSubmit={async (data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          if (!entryToEdit) {\n            onSubmit(data);\n          } else {\n            editEntry(data);\n          }\n          setSubmitting(false);\n          resetForm();\n        }}\n      >\n        {({ setFieldValue, isSubmitting }) => (\n          <Form>\n            <div className={classes.root}>\n              <Grid container spacing={3}>\n                <Grid item xs>\n                  <CalendarComponent name=\"date\" />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs>\n                  <FormControl variant=\"outlined\" fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Field\n                      name=\"categoryId\"\n                      label=\"Category\"\n                      onChange={(e: any) => {\n                        if (e.target.value === Infinity) {\n                          setAddCategory(true);\n                          setFieldValue(\n                            \"categoryId\",\n                            data!.getUserCategories[0].id\n                          );\n                        } else {\n                          setFieldValue(\"categoryId\", e.target.value);\n                        }\n                      }}\n                      className={classes.selectBorder}\n                      as={Select}\n                    >\n                      {categories.map((category, index) => {\n                        return (\n                          <MenuItem key={index} value={category.id}>\n                            {category.description} - {category.duration} mins\n                            spent\n                          </MenuItem>\n                        );\n                      })}\n                      <MenuItem value={Infinity}>Add new category...</MenuItem>\n                    </Field>\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs>\n                  <Field\n                    type=\"number\"\n                    label=\"Duration\"\n                    name=\"duration\"\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"start\">mins</InputAdornment>\n                      ),\n                      classes: {\n                        root: classes.cssOutlinedInput,\n                        notchedOutline: classes.notchedOutline,\n                      },\n                    }}\n                    fullWidth\n                    variant=\"outlined\"\n                    as={TextField}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs>\n                  <Field\n                    label=\"Title\"\n                    name=\"title\"\n                    fullWidth\n                    variant=\"outlined\"\n                    InputProps={{\n                      classes: {\n                        root: classes.cssOutlinedInput,\n                        notchedOutline: classes.notchedOutline,\n                      },\n                    }}\n                    as={TextField}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3}>\n                <Grid item xs>\n                  <Field\n                    label=\"Additional notes (optional)\"\n                    name=\"notes\"\n                    multiline\n                    fullWidth\n                    rows={7}\n                    variant=\"outlined\"\n                    InputProps={{\n                      classes: {\n                        root: classes.cssOutlinedInput,\n                        notchedOutline: classes.notchedOutline,\n                      },\n                    }}\n                    as={TextField}\n                  />\n                </Grid>\n              </Grid>\n              <Grid container spacing={3} justify=\"center\">\n                <Grid item>\n                  {editMode ? (\n                    <Grid container spacing={3}>\n                      <Grid item xs={6}>\n                        <Button\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                          variant=\"outlined\"\n                          fullWidth\n                          color=\"primary\"\n                          style={{ whiteSpace: \"nowrap\" }}\n                        >\n                          Edit Entry\n                        </Button>\n                      </Grid>\n                      <Grid item xs={6}>\n                        <Button\n                          disabled={isSubmitting}\n                          onClick={handleCancel}\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          fullWidth\n                        >\n                          Cancel\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  ) : (\n                    <Button\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                      variant=\"outlined\"\n                      color=\"primary\"\n                    >\n                      Add Entry\n                    </Button>\n                  )}\n                </Grid>\n              </Grid>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      <NewCategoryDialog isOpen={addCategory} setIsOpen={setAddCategory} />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { DataObject } from \"../../Functions/dataProcessing\";\nimport { ResponsiveLine } from \"@nivo/line\";\nimport { Typography, useTheme, Card } from \"@material-ui/core\";\nimport { useMeQuery } from \"../../generated/graphql\";\nimport { blueGrey } from \"@material-ui/core/colors\";\nimport Brightness1Icon from \"@material-ui/icons/Brightness1\";\n\ninterface LineGraphProps {\n  data: DataObject[] | undefined;\n}\n\nexport const LineGraphWidget: React.FC<LineGraphProps> = ({ data }) => {\n  const muiTheme = useTheme();\n  const { loading, data: meData } = useMeQuery();\n  const [colors, setColors] = useState<Array<any>>([]);\n  const [active, setActive] = useState<boolean>(false);\n\n  const theme = {\n    textColor: muiTheme.palette.text.primary,\n  };\n\n  const isLightTheme = () => {\n    return meData && meData.me && meData?.me.theme === \"light\";\n  };\n\n  return (\n    <>\n      {data ? (\n        <ResponsiveLine\n          // data={generateData()}\n          data={data!}\n          theme={theme as any}\n          margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n          xScale={{ type: \"point\" }}\n          yScale={{\n            type: \"linear\",\n            min: \"auto\",\n            max: \"auto\",\n            stacked: false,\n            reverse: false,\n          }}\n          axisTop={null}\n          axisRight={null}\n          curve=\"cardinal\"\n          axisBottom={{\n            orient: \"bottom\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: \"month\",\n            legendOffset: 36,\n            legendPosition: \"middle\",\n          }}\n          axisLeft={{\n            orient: \"left\",\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: \"minutes\",\n            legendOffset: -40,\n            legendPosition: \"middle\",\n          }}\n          colors={\n            active\n              ? colors\n              : {\n                  scheme: isLightTheme() ? \"category10\" : \"nivo\",\n                }\n          }\n          pointSize={10}\n          pointColor={{ theme: \"background\" }}\n          pointBorderWidth={2}\n          enableSlices=\"x\"\n          sliceTooltip={({ slice }) => (\n            <Card\n              style={{\n                padding: 6,\n                backgroundColor: isLightTheme() ? \"white\" : blueGrey[800],\n              }}\n            >\n              {slice.points.map((point, index) => (\n                <div\n                  key={index}\n                  style={{\n                    padding: 2,\n                    backgroundColor: isLightTheme() ? \"white\" : blueGrey[800],\n                    display: \"flex\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <Brightness1Icon\n                    style={{ fontSize: 12, color: point.serieColor }}\n                  />\n                  {\"\\u00A0\\u00A0\"}\n                  <b>{point.serieId}</b>: {point.data.yFormatted} mins\n                </div>\n              ))}\n            </Card>\n          )}\n          pointBorderColor={{ from: \"serieColor\" }}\n          pointLabel=\"y\"\n          pointLabelYOffset={-12}\n          useMesh={false}\n          legends={[\n            {\n              anchor: \"right\",\n              direction: \"column\",\n              justify: false,\n              translateX: 111,\n              translateY: -50,\n              itemsSpacing: 4,\n              itemDirection: \"left-to-right\",\n              itemWidth: 99,\n              itemHeight: 20,\n              itemOpacity: 0.75,\n              itemTextColor: muiTheme.palette.text.primary,\n              symbolSize: 9,\n              symbolShape: \"circle\",\n              symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n              onClick: (d) => {\n                if (!active) {\n                  const colorList = data.map((series) =>\n                    series.id === d.id\n                      ? d.color\n                      : isLightTheme()\n                      ? \"rgba(207, 216, 220, 0.4)\"\n                      : \"rgba(144, 166, 178, 0.2)\"\n                  );\n                  setColors(colorList);\n                  setActive(true);\n                } else {\n                  setActive(false);\n                }\n              },\n              effects: [\n                {\n                  on: \"hover\",\n                  style: {\n                    itemBackground: \"rgba(0, 0, 0, .03)\",\n                    itemOpacity: 1,\n                  },\n                },\n              ],\n            },\n          ]}\n        />\n      ) : (\n        <Typography\n          variant=\"h6\"\n          style={{\n            textAlign: \"center\",\n            justifyContent: \"center\",\n            paddingTop: 20,\n          }}\n        >\n          No entries yet!\n        </Typography>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  createStyles,\n  Theme,\n  makeStyles,\n  useTheme,\n} from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Category } from \"../../generated/graphql\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { setSelectedCategory } from \"../../redux/actions\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n    },\n    inline: {\n      display: \"inline\",\n    },\n    hover: {\n      \"&:hover\": {\n        backgroundColor: \"rgba(144, 166, 178, 0.2)\",\n      },\n    },\n  })\n);\n\ninterface TopFiveWidgetProps {\n  categoryList: Category[] | undefined;\n}\n\nexport const TopFiveWidget: React.FC<TopFiveWidgetProps> = ({\n  categoryList,\n}) => {\n  const classes = useStyles();\n  const [topFive, setTopFive] = useState<Array<Category>>([]);\n  const [totalDuration, setTotalDuration] = useState(0);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (categoryList !== undefined && categoryList !== null) {\n      if (categoryList.length >= 1 && categoryList.length <= 5) {\n        setTopFive(categoryList);\n      }\n\n      if (categoryList.length >= 5) {\n        setTopFive(\n          [...categoryList]\n            .sort((x, y) => {\n              return x.duration > y.duration ? -1 : 1;\n            })\n            .slice(0, 5)\n        );\n      }\n      setTotalDuration(\n        categoryList.reduce((acc, curr) => ({\n          id: 0,\n          description: \"\",\n          duration: acc.duration + curr.duration,\n        })).duration\n      );\n    }\n  }, [categoryList]);\n\n  const handleClick = (catId: number) => {\n    const cat = categoryList!.find((cat) => cat.id === catId);\n    dispatch(setSelectedCategory(cat));\n  };\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {totalDuration === 0 ? (\n        <Typography variant=\"body1\" style={{ paddingTop: 30 }}>\n          Log your first entry!\n        </Typography>\n      ) : categoryList ? (\n        <List className={classes.root}>\n          {topFive.map((category) => (\n            <Link\n              key={category.id}\n              to=\"/ok/category_list\"\n              style={{ textDecoration: \"none\" }}\n              onClick={() => handleClick(category.id)}\n            >\n              <TopFiveItem category={category} totalDuration={totalDuration} />\n            </Link>\n          ))}\n        </List>\n      ) : (\n        <CircularProgress />\n      )}\n    </div>\n  );\n};\n\ninterface ItemProps {\n  category: Category;\n  totalDuration: number;\n}\n\nconst TopFiveItem: React.FC<ItemProps> = ({ category, totalDuration }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  return (\n    <>\n      <ListItem alignItems=\"flex-start\" className={classes.hover}>\n        <ListItemAvatar>\n          <Avatar\n            aria-label={category.description}\n            style={{ backgroundColor: theme.palette.secondary.main }}\n          >\n            <b>{category.description.charAt(0).toUpperCase()}</b>\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText\n          primary={category.description}\n          style={{ color: theme.palette.text.primary }}\n          secondary={\n            <React.Fragment>\n              <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={classes.inline}\n                color=\"textPrimary\"\n              >\n                {category.duration >= 24 * 60\n                  ? `${Math.floor(category.duration / (24 * 60))} days, `\n                  : \"\"}\n                {Math.floor((category.duration % (24 * 60)) / 60)} hours and{\" \"}\n                {category.duration % 60} mins\n              </Typography>\n              <b>\n                {\" - \" + Math.round((category.duration / totalDuration) * 100)}%\n              </b>{\" \"}\n              of total time spent in this category\n            </React.Fragment>\n          }\n        />\n      </ListItem>\n      <Divider variant=\"inset\" component=\"li\" />\n    </>\n  );\n};\n","import { JournalEntry, Category } from \"../generated/graphql\";\n\n// https://stackoverflow.com/questions/23593052/format-javascript-date-as-yyyy-mm-dd?page=2&tab=votes#tab-top\nexport const getCurrentDayTimestamp = (d: Date) => {\n  return new Date(\n    Date.UTC(\n      d.getFullYear(),\n      d.getMonth(),\n      d.getDate(),\n      d.getHours(),\n      d.getMinutes(),\n      d.getSeconds()\n    )\n\n    // `toIsoString` returns something like \"2017-08-22T08:32:32.847Z\"\n    // and we want the first part (\"2017-08-22\")\n  )\n    .toISOString()\n    .slice(0, 10);\n};\n\ninterface Datum {\n  x: string;\n  y: number;\n}\n\nexport interface DataObject {\n  id: string;\n  color: string;\n  data: Datum[];\n}\n\nconst months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst nivo = [\"#e8c1a0\", \"#f47560\", \"#f1e15b\", \"#e8a838\", \"#61cdbb\", \"#97e3d5\"];\n\nexport const generateLineGraphData = (\n  entries: JournalEntry[],\n  categories: Category[]\n) => {\n  if (entries.length === 0) {\n    return undefined;\n  }\n\n  let parsed = sortByCategory(entries, categories);\n  let result: DataObject[] = [];\n  for (let i = 0; i < parsed.length; i++) {\n    let obj: DataObject = {\n      id: categories.find((elem) => elem.id === parsed[i][0].categoryId)!\n        .description,\n      color: \"\",\n      data: [],\n    };\n    for (let j = 0; j < 12; j++) {\n      obj.data.push({\n        x: months[j],\n        y: getAmount(parsed[i], j),\n      });\n    }\n    result.push(obj);\n  }\n  return result;\n};\n\nconst getAmount = (parsed: any[], month: number) => {\n  const hello = parsed.filter((entry: any) => entry.date.getMonth() === month);\n\n  if (hello.length === 1) {\n    return hello[0].duration;\n  }\n\n  if (hello.length > 1) {\n    let num = hello.reduce((acc: any, cur: any) => ({\n      duration: acc.duration + cur.duration,\n    }));\n    return num.duration;\n  } else {\n    return 0;\n  }\n};\n\nconst sortByCategory = (entries: JournalEntry[], categories: Category[]) => {\n  let tempEntries: any[] = [];\n  let tempCategories: any[] = [];\n\n  for (let entry of entries) {\n    tempEntries.push({\n      id: entry.id,\n      date: new Date(entry.date),\n      categoryId: entry.categoryId,\n      duration: entry.duration,\n      title: entry.title,\n      notes: entry.notes,\n    });\n  }\n\n  for (let category of categories) {\n    tempCategories.push(category);\n  }\n\n  tempEntries.sort((a, b) => {\n    return a.categoryId > b.categoryId ? 1 : -1;\n  });\n\n  tempCategories.sort((a, b) => {\n    return a.id > b.id ? 1 : -1;\n  });\n\n  let result: any[] = [];\n  let counter = 0;\n\n  for (let category of tempCategories) {\n    let resultEntries: any[] = [];\n    while (\n      counter < tempEntries.length &&\n      tempEntries[counter].categoryId === category.id\n    ) {\n      resultEntries.push({\n        id: tempEntries[counter].id,\n        date: tempEntries[counter].date,\n        categoryId: tempEntries[counter].categoryId,\n        duration: tempEntries[counter].duration,\n        title: tempEntries[counter].title,\n        notes: tempEntries[counter].notes,\n      });\n      counter++;\n    }\n    if (resultEntries.length !== 0) {\n      result.push(resultEntries);\n    }\n  }\n  return result;\n};\n\nexport interface CalendarDataProps {\n  day: string;\n  value: number;\n}\n\nexport const populateCalendar = (data: JournalEntry[]) => {\n  let result: CalendarDataProps[] = [];\n  let days = new Map();\n\n  for (let i = 0; i < data.length; i++) {\n    if (days.has(data[i].date!)) {\n      days.set(data[i].date!, days.get(data[i].date!) + data[i].duration);\n    } else {\n      days.set(data[i].date!, data[i].duration);\n    }\n  }\n\n  days.forEach((value, key) => {\n    result.push({\n      day: getCurrentDayTimestamp(new Date(key)),\n      value: value,\n    });\n  });\n\n  return result;\n};\n\n// const sortByDate = (entries: JournalEntry[]) => {\n//   let temp: any[] = [];\n\n//   for (let entry of entries) {\n//     temp.push({\n//       id: entry.id,\n//       date: new Date(entry.date),\n//       categoryId: entry.categoryId,\n//       duration: entry.duration,\n//       title: entry.title,\n//       notes: entry.notes,\n//     });\n//   }\n\n//   temp.sort((a, b) => {\n//     return a.date > b.date ? 1 : -1;\n//   });\n\n//   let result: any[] = [];\n//   let counter = 0;\n\n//   for (let i = 0; i < 12; i++) {\n//     let resultEntries: any[] = [];\n//     while (temp[counter].date.getMonth() === i) {\n//       resultEntries.push({\n//         id: temp[counter].id,\n//         date: getCurrentDayTimestamp(temp[counter].date),\n//         categoryId: temp[counter].categoryId,\n//         duration: temp[counter].duration,\n//         title: temp[counter].title,\n//         notes: temp[counter].notes,\n//       });\n//       counter++;\n//     }\n//     result.push(resultEntries);\n//   }\n\n//   return result;\n// };\n\n// const arr = [\n//   \"Uncategorized\",\n//   \"Leisure\",\n//   \"School\",\n//   \"Exercise\",\n//   \"Chores\",\n//   \"Work\",\n//   \"Social\",\n//   \"Family\",\n//   \"Misc.\",\n// ];\n\n// export const generateData = () => {\n//   let result: DataObject[] = [];\n\n//   for (let i = 0; i < arr.length; i++) {\n//     let obj: DataObject = {\n//       id: arr[i],\n//       color: nivo[Math.round(Math.random() * 5)],\n//       data: [],\n//     };\n//     for (let j = 0; j < 12; j++) {\n//       obj.data.push({\n//         x: months[j],\n//         y: Math.round(Math.random() * (600 - 1) + 1),\n//       });\n//     }\n//     result.push(obj);\n//   }\n//   return result;\n// };\n\n// export const data3 = generateData();\n\n// export const data2 = () => {\n//   let arr = [];\n//   for (let i = 0; i < 200; i++) {\n//     arr.push({\n//       day: randomDate(new Date(2019, 12, 1), new Date(2021, 2, 1)),\n//       value: i,\n//     });\n//   }\n//   return arr;\n// };\n\n// function randomDate(start: Date, end: Date) {\n//   return getCurrentDayTimestamp(\n//     new Date(\n//       start.getTime() + Math.random() * (end.getTime() - start.getTime())\n//     )\n//   );\n// }\n","import React from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  useDeleteCategoryMutation,\n  GetUserCategoriesQuery,\n  GetUserCategoriesDocument,\n  GetAllUserEntriesQuery,\n  GetAllUserEntriesDocument,\n} from \"../../generated/graphql\";\nimport { CategoryCardProps } from \"./CategoryCard\";\n\ninterface DeleteDialogProps {\n  isOpen: boolean;\n  setIsOpen(bool: boolean): void;\n  category: CategoryCardProps;\n}\n\nexport const DeleteCategoryDialog: React.FC<DeleteDialogProps> = ({\n  isOpen,\n  setIsOpen,\n  category,\n}) => {\n  const [deleteCategory] = useDeleteCategoryMutation();\n\n  const handleDelete = async () => {\n    if (category.description === \"Uncategorized\") {\n      alert(\"You cannot delete the 'Uncategorized' category.\");\n      return;\n    }\n\n    try {\n      await deleteCategory({\n        variables: {\n          categoryId: category.id,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.deleteCategory.categories,\n            },\n          });\n          store.writeQuery<GetAllUserEntriesQuery>({\n            query: GetAllUserEntriesDocument,\n            data: {\n              getAllUserEntries: data.deleteCategory.entries,\n            },\n          });\n        },\n      });\n    } catch (err) {\n      alert(\"Entry could not be deleted. Error: \" + err);\n    }\n    setIsOpen(false);\n  };\n\n  const handleCloseDelete = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={handleCloseDelete}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {`Are you sure you want to delete the ${category.description} category?`}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          This action will re-categorize all entries tagged with the{\" \"}\n          <b>{category.description}</b> category to the 'Uncategorized' category\n          and permanently delete this category.\n          <br />\n          <br /> You currently have <b>{category.duration} minutes</b> assigned\n          to entries in this category which will be reassigned. <br />\n          <br />\n          This action cannot be undone.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseDelete} color=\"primary\" autoFocus>\n          No\n        </Button>\n        <Button onClick={handleDelete} color=\"primary\">\n          Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  TextField,\n} from \"@material-ui/core\";\nimport {\n  GetUserCategoriesQuery,\n  GetUserCategoriesDocument,\n  GetAllUserEntriesQuery,\n  GetAllUserEntriesDocument,\n  useEditCategoryMutation,\n} from \"../../generated/graphql\";\nimport { CategoryCardProps } from \"./CategoryCard\";\n\ninterface DeleteDialogProps {\n  isOpen: boolean;\n  setIsOpen(bool: boolean): void;\n  category: CategoryCardProps;\n}\n\nexport const EditCategoryDialog: React.FC<DeleteDialogProps> = ({\n  isOpen,\n  setIsOpen,\n  category,\n}) => {\n  const [editCategory] = useEditCategoryMutation();\n  const [updatedDescription, setUpdatedDescription] = useState(\"\");\n\n  const handleEdit = async () => {\n    if (category.description === \"Uncategorized\") {\n      alert(\"You cannot delete the 'Uncategorized' category.\");\n      return;\n    }\n\n    try {\n      await editCategory({\n        variables: {\n          categoryId: category.id,\n          updatedDescription: updatedDescription,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.editCategory.categories,\n            },\n          });\n          store.writeQuery<GetAllUserEntriesQuery>({\n            query: GetAllUserEntriesDocument,\n            data: {\n              getAllUserEntries: data.editCategory.entries,\n            },\n          });\n        },\n      });\n    } catch (err) {\n      alert(\"Entry could not be edited. Error: \" + err);\n    }\n    setIsOpen(false);\n  };\n\n  const handleCloseEdit = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={handleCloseEdit}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {`Are you sure you want to edit the ${category.description} category?`}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Enter a name to change <b>{category.description}'s</b> title to:\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"description\"\n          label=\"Category Title\"\n          type=\"input\"\n          onChange={(e) => setUpdatedDescription(e.target.value)}\n          fullWidth\n        />\n        <DialogContentText id=\"alert-dialog-description2\">\n          <br />\n          This action will re-name the <b>{category.description}</b> category to{\" \"}\n          <b>{updatedDescription}</b>\n          <br />\n          <br /> You currently have <b>{category.duration} minutes</b> assigned\n          to entries in this category. <br />\n          <br />\n          This action cannot be undone.\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseEdit} color=\"primary\" autoFocus>\n          No\n        </Button>\n        <Button onClick={handleEdit} color=\"primary\">\n          Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  useTheme,\n} from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  CardHeader,\n  Avatar,\n  IconButton,\n  Menu,\n  MenuItem,\n  Collapse,\n} from \"@material-ui/core\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport clsx from \"clsx\";\nimport { Category } from \"../../redux/types\";\nimport { DeleteCategoryDialog } from \"./DeleteCategoryDialog\";\nimport { EditCategoryDialog } from \"./EditCategoryDialog\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"&:hover\": {\n        cursor: \"pointer\",\n      },\n    },\n    title: {\n      fontSize: 25,\n    },\n    pos: {\n      marginBottom: 12,\n    },\n    expand: {\n      transform: \"rotate(0deg)\",\n      marginLeft: \"auto\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      // transform: \"rotate(180deg)\",\n    },\n  })\n);\n\nexport interface CategoryCardProps {\n  id: number;\n  description: string;\n  duration: number;\n  totalDuration: number;\n  barDuration: number;\n  setActiveCategory(category: Category): void;\n  activeCategory: Category | undefined;\n}\n\nexport const CategoryCard = (category: CategoryCardProps) => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [expanded, setExpanded] = React.useState(false);\n  const [openDeleteDialog, setOpenDeleteDialog] = React.useState(false);\n  const [openEditDialog, setOpenEditDialog] = React.useState(false);\n  const theme = useTheme();\n\n  useEffect(() => {\n    if (category.id === category.activeCategory?.id) {\n      setExpanded(true);\n    } else {\n      setExpanded(false);\n    }\n  }, [category.activeCategory]);\n\n  const selectCategory = () => {\n    category.setActiveCategory({\n      id: category.id,\n      description: category.description,\n      duration: category.duration,\n    });\n  };\n\n  const handleOpenDelete = () => {\n    setAnchorEl(null);\n    setOpenDeleteDialog(true);\n  };\n\n  const handleOpenEdit = () => {\n    setAnchorEl(null);\n    setOpenEditDialog(true);\n  };\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const percentageFill = (category.duration / category.barDuration) * 100;\n\n  return (\n    <>\n      <Card variant=\"outlined\" className={classes.root} id=\"card\">\n        <CardHeader\n          style={{\n            background: `linear-gradient(90deg, ${\n              theme.palette.primary.light\n            } ${Math.round(percentageFill)}%, ${\n              theme.palette.background.paper\n            } ${Math.round(percentageFill)}%)`,\n          }}\n          avatar={\n            <Avatar\n              aria-label={category.description}\n              style={{ backgroundColor: theme.palette.secondary.main }}\n            >\n              <b>{category.description.charAt(0).toUpperCase()}</b>\n            </Avatar>\n          }\n          action={\n            <div>\n              {category.description !== \"Uncategorized\" ? (\n                <div>\n                  <IconButton\n                    aria-label=\"more\"\n                    aria-controls=\"simple-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"secondary\"\n                    onClick={handleClick}\n                  >\n                    <MoreVertIcon />\n                  </IconButton>\n                  <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                  >\n                    <MenuItem onClick={handleOpenEdit}>Edit</MenuItem>\n                    <MenuItem onClick={handleOpenDelete}>Delete</MenuItem>\n                  </Menu>\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          }\n          title={\n            <div>\n              <Typography\n                variant=\"h5\"\n                className={clsx(classes.expand, {\n                  [classes.expandOpen]: expanded,\n                })}\n                onClick={selectCategory}\n                aria-expanded={expanded}\n              >\n                {category.description}\n              </Typography>\n            </div>\n          }\n        />\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent>\n            <Typography variant=\"body1\" component=\"p\">\n              <b>{category.duration} mins</b> spent in total\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              <b>\n                {category.duration >= 24 * 60\n                  ? `${Math.floor(category.duration / (24 * 60))} days, `\n                  : \"\"}\n                {Math.floor((category.duration % (24 * 60)) / 60)} hours and{\" \"}\n                {category.duration % 60} mins\n              </b>{\" \"}\n              spent in total\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              <b>\n                {((category.duration / category.totalDuration) * 100).toFixed(\n                  2\n                )}\n                %\n              </b>{\" \"}\n              of total time spent in this category\n            </Typography>\n          </CardContent>\n        </Collapse>\n      </Card>\n      <div>\n        {openDeleteDialog ? (\n          <DeleteCategoryDialog\n            isOpen={openDeleteDialog}\n            setIsOpen={setOpenDeleteDialog}\n            category={category}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div>\n        {openEditDialog ? (\n          <EditCategoryDialog\n            isOpen={openEditDialog}\n            setIsOpen={setOpenEditDialog}\n            category={category}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { CategoryCard } from \"./CategoryCard\";\nimport { Category } from \"../../redux/types\";\n\ninterface CategoryLaneProps {\n  activeCategory: Category | undefined;\n  categoryList: Category[] | undefined;\n  setActiveCategory(category: Category): void;\n}\n\nexport const CategoryLane: React.FC<CategoryLaneProps> = ({\n  activeCategory,\n  categoryList,\n  setActiveCategory,\n}) => {\n  const [windowHeight, setWindowHeight] = useState(0);\n  const MAX_HEIGHT = windowHeight - 165;\n  const [totalDuration, setTotalDuration] = useState(0);\n  const [barDuration, setBarDuration] = useState(0);\n  const [categories, setCategories] = useState<Array<Category>>([]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    updateWindowDimensions();\n  }, []);\n\n  useEffect(() => {\n    if (categoryList) {\n      const arr = categoryList\n        .slice()\n        .sort((a, b) => (a.duration > b.duration ? -1 : 1));\n\n      setCategories(arr);\n\n      setTotalDuration(\n        arr\n          .map((e) => e.duration)\n          .reduce((rsf, currentValue) => rsf + currentValue)\n      );\n\n      setBarDuration(\n        arr\n          .map((e) => e.duration)\n          .reduce((rsf, currentValue) => Math.max(rsf, currentValue))\n      );\n    }\n  }, [categoryList]);\n\n  const updateWindowDimensions = () => {\n    setWindowHeight(window.innerHeight);\n  };\n\n  return (\n    <Grid\n      container\n      spacing={1}\n      style={{ maxHeight: MAX_HEIGHT, overflow: \"auto\" }}\n    >\n      {categories.map((element) => {\n        return (\n          <Grid item xs={12} key={element.id}>\n            <CategoryCard\n              id={element.id}\n              description={element.description}\n              duration={element.duration}\n              totalDuration={totalDuration}\n              barDuration={barDuration}\n              setActiveCategory={setActiveCategory}\n              activeCategory={activeCategory}\n            />\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { ResponsivePie, PieDatum } from \"@nivo/pie\";\nimport { Category } from \"../../redux/types\";\nimport { useTheme } from \"@material-ui/core\";\nimport { useMeQuery } from \"../../generated/graphql\";\n\ninterface CategoryDataProps {\n  activeCategory: Category | undefined;\n  categoryList: Category[] | undefined;\n  setActiveCategory(category: Category): void;\n}\n\ninterface DefProps {\n  match: {\n    id: string;\n  };\n  id: string;\n}\n\nexport const CategoryPieChart: React.FC<CategoryDataProps> = ({\n  activeCategory,\n  categoryList,\n  setActiveCategory,\n}) => {\n  const [fill, setFill] = useState<Array<DefProps>>([]);\n  const [chartData, setChartData] = useState<Array<PieDatum>>([]);\n  const [categories, setCategories] = useState<Array<Category>>([]);\n  const muiTheme = useTheme();\n\n  useEffect(() => {\n    if (categoryList) {\n      let updatedData: PieDatum[] = [];\n      categoryList.forEach((element) => {\n        updatedData.push({\n          id: element.description,\n          label: element.description,\n          value: element.duration,\n          color: \"\",\n        });\n      });\n      setCategories(categoryList);\n      setChartData(updatedData);\n    }\n  }, [categoryList]);\n\n  useEffect(() => {\n    updateActiveCategory(\n      activeCategory\n        ? {\n            id: activeCategory.description,\n            label: activeCategory.description,\n            value: activeCategory.duration,\n            color: \"\",\n          }\n        : undefined\n    );\n  }, [activeCategory, chartData]);\n\n  const handleClick = (event: PieDatum) => {\n    const category = categories.find((e) => e.description === event.id);\n    setActiveCategory(category!);\n  };\n\n  const updateActiveCategory = (selectedCategory: PieDatum | undefined) => {\n    if (selectedCategory) {\n      let fillArray: DefProps[] = [];\n\n      chartData.forEach((element) => {\n        if (element.id !== selectedCategory.id) {\n          fillArray.push({\n            match: {\n              id: element.id.toString(),\n            },\n            id: \"unselected\",\n          });\n        }\n      });\n      setFill(fillArray);\n    } else {\n      setFill([]);\n    }\n  };\n\n  return (\n    <div style={{ height: 450 }}>\n      <ResponsivePie\n        data={chartData}\n        margin={{ top: 40, right: 80, bottom: 40, left: 80 }}\n        innerRadius={0.5}\n        padAngle={0.7}\n        cornerRadius={3}\n        colors={{ scheme: \"set2\" }}\n        borderWidth={0}\n        borderColor={{ from: \"color\", modifiers: [[\"darker\", 0.2]] }}\n        radialLabelsSkipAngle={5}\n        radialLabelsTextXOffset={6}\n        radialLabelsTextColor={muiTheme.palette.text.primary}\n        radialLabelsLinkOffset={0}\n        radialLabelsLinkDiagonalLength={16}\n        radialLabelsLinkHorizontalLength={24}\n        radialLabelsLinkStrokeWidth={1}\n        radialLabelsLinkColor={{ from: \"color\" }}\n        slicesLabelsSkipAngle={10}\n        slicesLabelsTextColor=\"#333333\"\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        defs={[\n          {\n            id: \"unselected\",\n            type: \"linearGradient\",\n            colors: [{ offset: 100, color: \"#d6d6d6\" }],\n          },\n        ]}\n        fill={fill}\n        onClick={(e) => handleClick(e)}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Category } from \"../../redux/types\";\nimport { JournalEntry } from \"../../generated/graphql\";\n\ninterface CategoryTableProps {\n  activeCategory: Category | undefined;\n  categories: Category[] | undefined;\n  entries: JournalEntry[] | undefined;\n}\n\nexport const CategoryTable: React.FC<CategoryTableProps> = ({\n  activeCategory,\n  categories,\n  entries,\n}) => {\n  const [windowHeight, setWindowHeight] = useState(0);\n  const MAX_HEIGHT = windowHeight - 683;\n  const [rows, setRows] = useState<Array<any>>([]);\n\n  const loadData = () => {\n    if (categories && entries) {\n      if (activeCategory === undefined) {\n        let allRows: any[] = [];\n        entries.forEach((entry) => {\n          allRows.push({\n            title: entry.title,\n            date: entry.date,\n            duration: entry.duration,\n            category: categories.find((elem) => elem.id === entry.categoryId)\n              ?.description,\n          });\n        });\n        setRows(allRows);\n      } else {\n        let filteredRows: any[] = [];\n\n        entries\n          .filter((entry) => {\n            return entry.categoryId === activeCategory.id;\n          })\n          .forEach((filteredEntry) => {\n            filteredRows.push({\n              title: filteredEntry.title,\n              date: filteredEntry.date,\n              duration: filteredEntry.duration,\n              category: activeCategory.description,\n            });\n          });\n        setRows(filteredRows);\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    updateWindowDimensions();\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    loadData();\n  }, [activeCategory, categories, entries]);\n\n  const updateWindowDimensions = () => {\n    setWindowHeight(window.innerHeight);\n  };\n\n  return (\n    <div>\n      <TableContainer component={Paper} style={{ maxHeight: MAX_HEIGHT }}>\n        <Table stickyHeader aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Title</TableCell>\n              <TableCell align=\"right\">Date</TableCell>\n              <TableCell align=\"right\">Duration</TableCell>\n              <TableCell align=\"right\">Category</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.title}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.duration}</TableCell>\n                <TableCell align=\"right\">{row.category}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Grid,\n  makeStyles,\n  FormControlLabel,\n  Switch,\n  Theme,\n  createStyles,\n  Button,\n} from \"@material-ui/core\";\nimport { CategoryLane } from \"../components/Categories/CategoryLane\";\nimport { CategoryPieChart } from \"../components/Categories/CategoryPieChart\";\nimport { CategoryTable } from \"../components/Categories/CategoryTable\";\nimport { CategoryCalendar } from \"../components/Categories/CategoryCalendar\";\nimport { NewCategoryDialog } from \"../components/Categories/NewCategoryDialog\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  useGetAllUserEntriesQuery,\n  useGetUserCategoriesQuery,\n  Category,\n} from \"../generated/graphql\";\nimport { setSelectedCategory, setCalendarView } from \"../redux/actions\";\nimport { RootState } from \"../redux/reducers\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    button: {\n      margin: theme.spacing(1),\n      color: theme.palette.text.primary,\n    },\n  })\n);\n\nexport const CATEGORY_PAGE_CALENDAR_HEIGHT = 450;\n\nexport const CategoryList = () => {\n  const classes = useStyles();\n  const activeCategory = useSelector(\n    (state: RootState) => state.activeCategory.selectedCategory\n  );\n  const calendarView = useSelector(\n    (state: RootState) => state.calendarView.view\n  );\n  const {\n    loading: entryLoading,\n    data: entryData,\n  } = useGetAllUserEntriesQuery();\n  const {\n    loading: categoryLoading,\n    data: categoryData,\n  } = useGetUserCategoriesQuery();\n  const dispatch = useDispatch();\n  const [addCategory, setAddCategory] = useState(false);\n\n  const handleChange = () => {\n    dispatch(setCalendarView(!calendarView));\n  };\n\n  const onSelectCategory = (category: Category) => {\n    if (\n      (!entryLoading &&\n        !categoryLoading &&\n        activeCategory &&\n        category.description !== activeCategory.description) ||\n      !activeCategory\n    ) {\n      dispatch(setSelectedCategory(category));\n    } else {\n      dispatch(setSelectedCategory(undefined));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={3}>\n          <Typography variant=\"h4\">Categories</Typography>\n        </Grid>\n        <Grid item xs={9} style={{ textAlign: \"right\" }}>\n          <Button\n            variant=\"outlined\"\n            className={classes.button}\n            color=\"inherit\"\n            startIcon={<AddCircleIcon />}\n            onClick={() => setAddCategory(true)}\n          >\n            Create New Category\n          </Button>\n          <NewCategoryDialog isOpen={addCategory} setIsOpen={setAddCategory} />\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={4} sm={4} md={4} lg={4} xl={4}>\n          <CategoryLane\n            activeCategory={activeCategory}\n            categoryList={categoryData?.getUserCategories}\n            setActiveCategory={onSelectCategory}\n          />\n        </Grid>\n        <Grid item xs={8} sm={8} md={8} lg={8} xl={8}>\n          <FormControlLabel\n            control={<Switch checked={calendarView} onChange={handleChange} />}\n            label={calendarView ? \"Switch to Pie Chart\" : \"Switch to Calendar\"}\n          />\n          {calendarView ? (\n            <CategoryCalendar\n              activeCategory={activeCategory}\n              entries={entryData?.getAllUserEntries}\n              maxHeight={CATEGORY_PAGE_CALENDAR_HEIGHT}\n              start=\"2020-02-01\"\n              end=\"2021-12-31\"\n            />\n          ) : (\n            <CategoryPieChart\n              activeCategory={activeCategory}\n              categoryList={categoryData?.getUserCategories}\n              setActiveCategory={onSelectCategory}\n            />\n          )}\n          <br />\n          <CategoryTable\n            activeCategory={activeCategory}\n            categories={categoryData?.getUserCategories}\n            entries={entryData?.getAllUserEntries}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { ResponsiveCalendar } from \"@nivo/calendar\";\nimport { Category } from \"../../redux/types\";\nimport { JournalEntry, useMeQuery } from \"../../generated/graphql\";\nimport { populateCalendar } from \"../../Functions/dataProcessing\";\nimport { useTheme, Card } from \"@material-ui/core\";\nimport { blueGrey } from \"@material-ui/core/colors\";\nimport Brightness1Icon from \"@material-ui/icons/Brightness1\";\nimport { CATEGORY_PAGE_CALENDAR_HEIGHT } from \"../../App/CategoryList\";\n\ninterface CategoryCalendarProps {\n  activeCategory: Category | undefined;\n  entries: JournalEntry[] | undefined;\n  maxHeight: number;\n  start: string;\n  end: string;\n}\n\nexport const CategoryCalendar: React.FC<CategoryCalendarProps> = ({\n  activeCategory,\n  entries,\n  maxHeight,\n  start,\n  end,\n}) => {\n  const [data, setData] = useState<Array<any>>([]);\n  const { loading, data: meData } = useMeQuery();\n  const muiTheme = useTheme();\n\n  const isLightTheme = () => {\n    return meData && meData.me && meData?.me.theme === \"light\";\n  };\n\n  const theme = {\n    textColor: muiTheme.palette.text.primary,\n    tooltip: {\n      container: {\n        background: isLightTheme() ? \"white\" : blueGrey[800],\n      },\n    },\n  };\n\n  useEffect(() => {\n    if (activeCategory !== undefined && entries) {\n      const filteredEntries = entries.filter(\n        (entry) => entry.categoryId === activeCategory.id\n      );\n      setData(populateCalendar(filteredEntries));\n    } else if (entries) {\n      setData(populateCalendar(entries));\n    }\n  }, [activeCategory, entries]);\n\n  const light = [\"#61cdbb\", \"#97e3d5\", \"#e8c1a0\", \"#f47560\"];\n  const dark = [\"#277534\", \"#50D473\", \"#70E18E\", \"#9BE8B3\", \"#0F1114\"];\n\n  return (\n    <div style={{ height: maxHeight }}>\n      <ResponsiveCalendar\n        data={data}\n        theme={theme as any}\n        from={start}\n        to={end}\n        emptyColor={isLightTheme() ? \"#eeeeee\" : blueGrey[700]}\n        colors={light}\n        margin={{ top: 40, right: 40, bottom: 40, left: 40 }}\n        yearSpacing={40}\n        monthBorderColor={\n          isLightTheme()\n            ? \"white\"\n            : maxHeight === CATEGORY_PAGE_CALENDAR_HEIGHT\n            ? muiTheme.palette.background.default\n            : muiTheme.palette.background.paper\n        }\n        dayBorderWidth={2}\n        dayBorderColor={\n          isLightTheme()\n            ? \"white\"\n            : maxHeight === CATEGORY_PAGE_CALENDAR_HEIGHT\n            ? muiTheme.palette.background.default\n            : muiTheme.palette.background.paper\n        }\n        onClick={({ value }) => {\n          return;\n        }}\n        legends={[\n          {\n            anchor: \"bottom-right\",\n            direction: \"row\",\n            translateY: 36,\n            itemCount: 4,\n            itemWidth: 42,\n            itemHeight: 36,\n            itemsSpacing: 14,\n            itemDirection: \"right-to-left\",\n            itemTextColor: muiTheme.palette.text.primary,\n          },\n        ]}\n        tooltip={({ color, day, value }) => (\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            <Brightness1Icon style={{ fontSize: 12, color: color }} />\n            {\"\\u00A0\\u00A0\"}\n            {day}:{\"\\u00A0\"}\n            <b>{value} mins</b>\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { dashboardStyles } from \"../../App/Dashboard\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\n\ninterface TotalEntriesCardProps {\n  numEntries: number | undefined;\n}\n\nexport const TotalEntriesCard: React.FC<TotalEntriesCardProps> = ({\n  numEntries,\n}) => {\n  const classes = dashboardStyles();\n\n  return (\n    <>\n      <Card className={classes.cards}>\n        <CardContent>\n          {numEntries !== undefined ? (\n            <>\n              <Typography variant=\"h5\" component=\"h2\" className={classes.top}>\n                <b>{numEntries}</b> Entries\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\" className={classes.bot}>\n                Entered in total\n              </Typography>\n            </>\n          ) : (\n            <CircularProgress />\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { dashboardStyles } from \"../../App/Dashboard\";\nimport { Card, CardContent, Typography, Button } from \"@material-ui/core\";\n\ninterface WeeklyEntriesCardProps {}\n\nexport const EmojiCard: React.FC<WeeklyEntriesCardProps> = ({}) => {\n  const classes = dashboardStyles();\n  const [emoji, setEmoji] = useState(\"\");\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    fetch(\"https://ranmoji.herokuapp.com/emojis/api/v.1.0/\").then(\n      (response) => {\n        response.json().then((data) => {\n          setEmoji(\n            String.fromCodePoint(\n              parseInt(data.emoji.split(\"\").slice(3, 8).join(\"\"), 16)\n            )\n          );\n        });\n      }\n    );\n  };\n\n  const handleClick = () => {\n    fetchData();\n  };\n  return (\n    <>\n      <Card className={classes.cards}>\n        <CardContent>\n          <Button size=\"small\" onClick={handleClick}>\n            <Typography variant=\"h3\">{emoji}</Typography>\n          </Button>\n          <Typography variant=\"body2\" component=\"p\">\n            A random emoji to brighten your day\n          </Typography>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n","import React from \"react\";\nimport { dashboardStyles } from \"../../App/Dashboard\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\n\ninterface TopCategoryCardProps {\n  totalDuration: number | undefined;\n}\n\nexport const TotalMinutesCard: React.FC<TopCategoryCardProps> = ({\n  totalDuration,\n}) => {\n  const classes = dashboardStyles();\n\n  return (\n    <>\n      <Card className={classes.cards}>\n        <CardContent>\n          {totalDuration !== undefined ? (\n            <>\n              <Typography variant=\"h5\" component=\"h2\" className={classes.top}>\n                <b>{totalDuration}</b> minutes\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\" className={classes.bot}>\n                Logged in total\n              </Typography>\n            </>\n          ) : (\n            <CircularProgress />\n          )}\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  useMeQuery,\n  GetUserCategoriesQuery,\n  GetUserCategoriesDocument,\n  GetAllUserEntriesQuery,\n  GetAllUserEntriesDocument,\n  useCreateEntryMutation,\n  useGetAllUserEntriesQuery,\n  useGetUserCategoriesQuery,\n} from \"../generated/graphql\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Typography,\n  Card,\n  Grid,\n  Paper,\n} from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { CreateEntryForm } from \"../Forms/CreateEntryForm\";\nimport { JournalEntry } from \"../redux/types\";\nimport { LineGraphWidget } from \"../components/Dashboard/LineGraphWidget\";\nimport { TopFiveWidget } from \"../components/Dashboard/TopFiveWidget\";\nimport {\n  getCurrentDayTimestamp,\n  generateLineGraphData,\n  DataObject,\n} from \"../Functions/dataProcessing\";\nimport { CategoryCalendar } from \"../components/Categories/CategoryCalendar\";\nimport { TotalEntriesCard } from \"../components/Dashboard/TotalEntriesCard\";\nimport { EmojiCard } from \"../components/Dashboard/EmojiCard\";\nimport { TotalMinutesCard } from \"../components/Dashboard/TotalMinutesCard\";\n\nexport const dashboardStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    cards: {\n      textAlign: \"center\",\n      height: 115,\n      whiteSpace: \"nowrap\",\n    },\n    bullet: {\n      display: \"inline-block\",\n      margin: \"0 2px\",\n      transform: \"scale(0.8)\",\n    },\n    title: {\n      fontSize: 14,\n    },\n    top: {\n      marginTop: 12,\n    },\n    bot: {\n      marginBottom: 12,\n    },\n    paper: {\n      padding: theme.spacing(2),\n    },\n    headers: {\n      textAlign: \"left\",\n      paddingLeft: 20,\n      paddingTop: 15,\n    },\n    widgets: {\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\",\n      paddingBottom: 15,\n    },\n  })\n);\n\nconst Layout = styled.div`\n  display: flex;\n  min-height: 100%;\n  min-width: 100%;\n`;\n\nexport const Dashboard = () => {\n  const { data, loading } = useMeQuery();\n  const classes = dashboardStyles();\n  const [createEntry] = useCreateEntryMutation();\n  const {\n    loading: entryLoading,\n    data: entryData,\n  } = useGetAllUserEntriesQuery();\n  const {\n    loading: categoryLoading,\n    data: categoryData,\n  } = useGetUserCategoriesQuery();\n  const [calendarData, setCalendarData] = useState<\n    Array<DataObject> | undefined\n  >([]);\n  const [numEntries, setNumEntries] = useState<number | undefined>(undefined);\n  const [totalMinutes, setTotalMinutes] = useState<number | undefined>(\n    undefined\n  );\n\n  useEffect(() => {\n    if (\n      !entryLoading &&\n      !categoryLoading &&\n      entryData &&\n      entryData.getAllUserEntries &&\n      categoryData &&\n      categoryData.getUserCategories\n    ) {\n      setCalendarData(\n        generateLineGraphData(\n          entryData.getAllUserEntries,\n          categoryData.getUserCategories\n        )\n      );\n      if (entryData.getAllUserEntries.length === 0) {\n        setTotalMinutes(0);\n        setNumEntries(0);\n      } else {\n        let num = entryData.getAllUserEntries.reduce((acc, cur) => ({\n          title: \"\",\n          id: 0,\n          date: \"\",\n          notes: \"\",\n          categoryId: 0,\n          duration: acc.duration + cur.duration,\n        })).duration;\n        setTotalMinutes(num);\n        setNumEntries(entryData.getAllUserEntries.length);\n      }\n    }\n  }, [entryData, categoryData, entryLoading, categoryLoading]);\n\n  const handleSubmit = async (data: JournalEntry) => {\n    try {\n      const response = await createEntry({\n        variables: {\n          categoryId: data.categoryId,\n          title: data.title,\n          notes: data.notes,\n          duration: data.duration,\n          date: getCurrentDayTimestamp(new Date(data.date)),\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.createEntry.categories,\n            },\n          });\n          store.writeQuery<GetAllUserEntriesQuery>({\n            query: GetAllUserEntriesDocument,\n            data: {\n              getAllUserEntries: data.createEntry.entries,\n            },\n          });\n        },\n      });\n      if (!response) {\n        alert(\"Failed to add.\");\n        return;\n      }\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const handleEdit = async (id: number, data: JournalEntry) => {};\n\n  return (\n    <Layout>\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            {loading ? (\n              \"\"\n            ) : (\n              <Typography variant=\"h4\">\n                Welcome back, {data?.me?.firstName}\n              </Typography>\n            )}\n          </Grid>\n          <Grid item xs={3} sm={3} md={3} lg={3} xl={3}>\n            <Paper className={classes.paper}>\n              <Typography variant=\"h6\" component=\"h4\">\n                Quick-add Journal Entry\n              </Typography>\n              <CreateEntryForm onEdit={handleEdit} onSubmit={handleSubmit} />\n            </Paper>\n          </Grid>\n          <Grid item xs={9}>\n            <Grid container spacing={3}>\n              <Grid\n                item\n                xs={4}\n                sm={4}\n                md={4}\n                lg={4}\n                xl={4}\n                style={{ textAlign: \"center\" }}\n              >\n                <TotalEntriesCard numEntries={numEntries} />\n              </Grid>\n              <Grid item xs={4} sm={4} md={4} lg={4} xl={4}>\n                <TotalMinutesCard totalDuration={totalMinutes} />\n              </Grid>\n              <Grid item xs={4} sm={4} md={4} lg={4} xl={4}>\n                <EmojiCard />\n              </Grid>\n              <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\n                <Card>\n                  <Typography\n                    variant=\"h6\"\n                    component=\"h4\"\n                    className={classes.headers}\n                  >\n                    Entries in 2020\n                  </Typography>\n                  <div style={{ position: \"relative\", height: 392 }}>\n                    <div className={classes.widgets}>\n                      <LineGraphWidget data={calendarData} />\n                    </div>\n                  </div>\n                </Card>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={8} sm={8} md={8} lg={8} xl={8}>\n            <Card>\n              <Typography\n                variant=\"h6\"\n                component=\"h4\"\n                className={classes.headers}\n              >\n                Entries per day\n              </Typography>\n              <div style={{ position: \"relative\", height: 273 }}>\n                <div className={classes.widgets}>\n                  <CategoryCalendar\n                    activeCategory={undefined}\n                    entries={entryData?.getAllUserEntries}\n                    maxHeight={250}\n                    start=\"2020-02-01\"\n                    end=\"2020-12-31\"\n                  />\n                </div>\n              </div>\n            </Card>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} lg={4} xl={4}>\n            <Card style={{ height: 320, overflow: \"auto\" }}>\n              <Typography\n                variant=\"h6\"\n                component=\"h4\"\n                className={classes.headers}\n              >\n                Top 5 Categories\n              </Typography>\n              <TopFiveWidget categoryList={categoryData?.getUserCategories} />\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n    </Layout>\n  );\n};\n","import Button from \"@material-ui/core/Button\";\nimport { Form, Formik, useField, FieldAttributes } from \"formik\";\nimport * as React from \"react\";\nimport {\n  TextField,\n  Paper,\n  Grid,\n  makeStyles,\n  createStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\ninterface Values {\n  email: string;\n  password: string;\n}\n\ninterface Props {\n  onSubmit: (values: Values) => void;\n}\n\nconst validationSchema = yup.object({\n  email: yup.string().email().required(\"Email must be filled out.\"),\n  password: yup.string().required(\"Password must be filled out.\"),\n});\n\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\n  placeholder,\n  type,\n  ...props\n}) => {\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  return (\n    <TextField\n      label={placeholder}\n      variant=\"outlined\"\n      fullWidth\n      type={type ? type : \"text\"}\n      {...field}\n      error={errorText !== \"\"}\n      helperText={errorText}\n    />\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 500,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n    },\n  })\n);\n\nexport const LoginForm: React.FC<Props> = ({ onSubmit }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (data, { setSubmitting, resetForm }) => {\n          setSubmitting(true);\n          onSubmit(data);\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <div className={classes.root}>\n              <Paper className={classes.paper}>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <MyTextField placeholder=\"email\" name=\"email\" />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <MyTextField\n                      placeholder=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3} justify=\"center\">\n                  <Grid item>\n                    <Button\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                      variant=\"outlined\"\n                    >\n                      Login\n                    </Button>\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3} justify=\"center\">\n                  <Grid item>\n                    <Link to=\"/signup\" style={{ textDecoration: \"none\" }}>\n                      Sign Up\n                    </Link>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport {\n  useMeQuery,\n  useLogoutMutation,\n  useUpdateUserThemeMutation,\n  MeQuery,\n  MeDocument,\n} from \"../../generated/graphql\";\nimport { setAccessToken } from \"../../accessToken\";\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport { Switch } from \"@material-ui/core\";\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport BrightnessLowIcon from \"@material-ui/icons/BrightnessLow\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexGrow: 1,\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      background: theme.palette.secondary.light,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      paddingTop: 6,\n    },\n  })\n);\n\nexport const Header: React.FC = () => {\n  const { data, loading } = useMeQuery();\n  const [logout, { client }] = useLogoutMutation();\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n  const [updateTheme] = useUpdateUserThemeMutation();\n\n  let body: any = undefined;\n\n  if (!loading && data && data.me) {\n    body = data.me;\n  }\n\n  const handleChange = async () => {\n    try {\n      checked ? await changeTheme(\"light\") : await changeTheme(\"dark\");\n      setChecked(!checked);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  useEffect(() => {\n    if (!loading && data && data.me !== undefined && data.me !== null) {\n      if (data.me.theme === \"light\") {\n        setChecked(false);\n      }\n\n      if (data.me.theme === \"dark\") {\n        setChecked(true);\n      }\n    }\n  }, [loading]);\n\n  const changeTheme = async (theme: string) => {\n    try {\n      await updateTheme({\n        variables: {\n          theme: theme,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n\n          let hack = {\n            id: data.updateUserTheme.id,\n            email: data.updateUserTheme.email,\n            firstName: data.updateUserTheme.firstName,\n            lastName: data.updateUserTheme.lastName,\n            theme: data.updateUserTheme.theme === \"light\" ? \"dark\" : \"light\",\n          };\n\n          store.writeQuery<MeQuery>({\n            query: MeDocument,\n            data: {\n              me: hack,\n            },\n          });\n        },\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            {body !== undefined ? (\n              <Link\n                to=\"/ok/dashboard\"\n                style={{\n                  textDecoration: \"none\",\n                  color: \"white\",\n                }}\n              >\n                <HistoryIcon fontSize=\"large\" />\n              </Link>\n            ) : (\n              <Link to=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\n                <HistoryIcon fontSize=\"large\" />\n              </Link>\n            )}\n          </Typography>\n          {body !== undefined ? (\n            <>\n              {checked ? (\n                <BrightnessLowIcon color=\"secondary\" />\n              ) : (\n                <BrightnessHighIcon color=\"inherit\" />\n              )}\n              <Switch checked={checked} onChange={handleChange} />\n              <Button\n                variant=\"contained\"\n                onClick={async () => {\n                  await logout();\n                  await client!.resetStore();\n                  setAccessToken(\"\");\n                  window.location.href = \"/\";\n                }}\n              >\n                Logout\n              </Button>\n            </>\n          ) : (\n            <Button variant=\"contained\">\n              <Link\n                to=\"/login\"\n                style={{ textDecoration: \"none\", color: \"black\" }}\n              >\n                Login\n              </Link>\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  CssBaseline,\n  Grid,\n  Hidden,\n  Typography,\n  makeStyles,\n  Theme,\n  createStyles,\n} from \"@material-ui/core\";\nimport { Header } from \"../components/Layout/Header\";\nimport android_stock from \"../media/android_stock.jpg\";\n\nconst Root = styled.div`\n  height: 100vh;\n  width: 100vw;\n  padding-top: 20px;\n  overflow-x: hidden;\n  overflow-y: hidden;\n`;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    gridContainer: {\n      height: \"100vh\",\n      background: `url(${android_stock})`,\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n    },\n    gridItem: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\",\n      width: \"100vw\",\n    },\n    paper: {},\n  })\n);\n\nexport const Auth: React.FC<any> = ({ children, page }) => {\n  const classes = useStyles();\n  return (\n    <>\n      <Header />\n      <CssBaseline />\n      <Root>\n        <Grid container className={classes.gridContainer}>\n          <Hidden only={[\"xs\", \"sm\", \"md\"]}>\n            <Grid\n              item\n              lg={6}\n              xl={6}\n              className={classes.gridItem}\n              style={{\n                alignItems: \"flex-start\",\n                overflowY: \"scroll\",\n              }}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                spacing={4}\n                style={{ maxWidth: 650, paddingTop: 175, paddingBottom: 175 }}\n              >\n                <Grid item>\n                  <Typography\n                    variant=\"h1\"\n                    style={{\n                      color: \"white\",\n                      textAlign: \"center\",\n                    }}\n                  >\n                    Time Journal\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    variant=\"h6\"\n                    style={{ color: \"white\", textAlign: \"center\" }}\n                  >\n                    An application to keep track of where you spend your time.\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    variant=\"body1\"\n                    style={{ color: \"white\", textAlign: \"left\" }}\n                  >\n                    <br />\n                    Have you ever had a week go by and by the end of it, realize\n                    that you have no idea what you did that week? By keeping\n                    track of how we spend our time, we can take control of our\n                    actions to live more productive and well-balanced lives.\n                    <br />\n                    <br />\n                    <i>\n                      <b>Why Journaling?</b>\n                    </i>\n                    <br /> Research has shown that journaling can have powerful\n                    mental health benefits and act as a documentation tool for\n                    everyday life. Time Journal takes journaling a step further\n                    by allowing you to record how much time you spend on the\n                    activities and organize them into meaningful categories.{\" \"}\n                    <br />\n                    <br />\n                    <i>\n                      <b>How does it work?</b>\n                    </i>\n                    <br /> You will be able to create categories for your\n                    activities and see how much time you spend on each one. This\n                    application will combine common approaches to journaling and\n                    budgeting to create visibility into where your time goes.\n                    <br />\n                    Have you ever had a week go by and by the end of it, realize\n                    that you have no idea what you did that week? By keeping\n                    track of how we spend our time, we can take control of our\n                    actions to live more productive and well-balanced lives.\n                    <br />\n                    <br />\n                    <i>\n                      <b>Why Journaling?</b>\n                    </i>\n                    <br /> Research has shown that journaling can have powerful\n                    mental health benefits and act as a documentation tool for\n                    everyday life. Time Journal takes journaling a step further\n                    by allowing you to record how much time you spend on the\n                    activities and organize them into meaningful categories.{\" \"}\n                    <br />\n                    <br />\n                    <i>\n                      <b>How does it work?</b>\n                    </i>\n                    <br /> You will be able to create categories for your\n                    activities and see how much time you spend on each one. This\n                    application will combine common approaches to journaling and\n                    budgeting to create visibility into where your time goes.\n                    <br />\n                    Have you ever had a week go by and by the end of it, realize\n                    that you have no idea what you did that week? By keeping\n                    track of how we spend our time, we can take control of our\n                    actions to live more productive and well-balanced lives.\n                    <br />\n                    <br />\n                    <i>\n                      <b>Why Journaling?</b>\n                    </i>\n                    <br /> Research has shown that journaling can have powerful\n                    mental health benefits and act as a documentation tool for\n                    everyday life. Time Journal takes journaling a step further\n                    by allowing you to record how much time you spend on the\n                    activities and organize them into meaningful categories.{\" \"}\n                    <br />\n                    <br />\n                    <i>\n                      <b>How does it work?</b>\n                    </i>\n                    <br /> You will be able to create categories for your\n                    activities and see how much time you spend on each one. This\n                    application will combine common approaches to journaling and\n                    budgeting to create visibility into where your time goes.\n                    <br />\n                    Have you ever had a week go by and by the end of it, realize\n                    that you have no idea what you did that week? By keeping\n                    track of how we spend our time, we can take control of our\n                    actions to live more productive and well-balanced lives.\n                    <br />\n                    <br />\n                    <i>\n                      <b>Why Journaling?</b>\n                    </i>\n                    <br /> Research has shown that journaling can have powerful\n                    mental health benefits and act as a documentation tool for\n                    everyday life. Time Journal takes journaling a step further\n                    by allowing you to record how much time you spend on the\n                    activities and organize them into meaningful categories.{\" \"}\n                    <br />\n                    <br />\n                    <i>\n                      <b>How does it work?</b>\n                    </i>\n                    <br /> You will be able to create categories for your\n                    activities and see how much time you spend on each one. This\n                    application will combine common approaches to journaling and\n                    budgeting to create visibility into where your time goes.\n                    <br />\n                    Have you ever had a week go by and by the end of it, realize\n                    that you have no idea what you did that week? By keeping\n                    track of how we spend our time, we can take control of our\n                    actions to live more productive and well-balanced lives.\n                    <br />\n                    <br />\n                    <i>\n                      <b>Why Journaling?</b>\n                    </i>\n                    <br /> Research has shown that journaling can have powerful\n                    mental health benefits and act as a documentation tool for\n                    everyday life. Time Journal takes journaling a step further\n                    by allowing you to record how much time you spend on the\n                    activities and organize them into meaningful categories.{\" \"}\n                    <br />\n                    <br />\n                    <i>\n                      <b>How does it work?</b>\n                    </i>\n                    <br /> You will be able to create categories for your\n                    activities and see how much time you spend on each one. This\n                    application will combine common approaches to journaling and\n                    budgeting to create visibility into where your time goes.\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Hidden>\n          <Grid\n            item\n            xs={12}\n            sm={12}\n            md={12}\n            lg={6}\n            xl={6}\n            className={classes.gridItem}\n          >\n            <Grid\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              spacing={4}\n              style={{ paddingBottom: 30 }}\n            >\n              <Grid item>\n                <Typography\n                  variant=\"h4\"\n                  style={{ color: \"white\", maxWidth: 600, textAlign: \"center\" }}\n                >\n                  {page}\n                </Typography>\n              </Grid>\n              <Grid item>{children}</Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Root>\n    </>\n  );\n};\n","import React from \"react\";\nimport { LoginForm } from \"../Forms/LoginForm\";\nimport { useLoginMutation, MeQuery, MeDocument } from \"../generated/graphql\";\nimport { setAccessToken } from \"../accessToken\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Auth } from \"../layouts/Auth\";\n\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\n  const [login] = useLoginMutation();\n\n  const handleLogin = async (data: { email: string; password: string }) => {\n    try {\n      const response = await login({\n        variables: {\n          email: data.email,\n          password: data.password,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<MeQuery>({\n            //updating the Apollo Cache\n            query: MeDocument,\n            data: {\n              me: data.login.user,\n            },\n          });\n        },\n      });\n\n      if (response && response.data) {\n        setAccessToken(response.data.login.accessToken);\n      }\n\n      history.push(\"/ok/dashboard\");\n    } catch {\n      alert(\"Invalid credentials.\");\n    }\n  };\n\n  return (\n    <Auth page=\"Login\">\n      <LoginForm onSubmit={handleLogin} />\n    </Auth>\n  );\n};\n","import Button from \"@material-ui/core/Button\";\nimport { Form, Formik, useField, FieldAttributes } from \"formik\";\nimport * as React from \"react\";\nimport {\n  TextField,\n  Paper,\n  Grid,\n  makeStyles,\n  createStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\ninterface Values {\n  firstName: string;\n  lastName: string;\n  password: string;\n  passwordRepeat: string;\n  email: string;\n}\n\ninterface Props {\n  onSubmit: (values: Values) => void;\n}\n\nconst validationSchema = yup.object({\n  firstName: yup.string().required(\"First name must be filled out.\"),\n  email: yup.string().email().required(\"Email must be filled out.\"),\n  password: yup.string().required(\"Password must be filled out.\"),\n  passwordRepeat: yup\n    .string()\n    .required(\"Please re-enter password.\")\n    .oneOf([yup.ref(\"password\"), \"\"], \"Passwords must match\"),\n});\n\nconst MyTextField: React.FC<FieldAttributes<{}>> = ({\n  placeholder,\n  type,\n  ...props\n}) => {\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  return (\n    <TextField\n      label={placeholder}\n      variant=\"outlined\"\n      fullWidth\n      type={type}\n      {...field}\n      error={errorText !== \"\"}\n      helperText={errorText}\n    />\n  );\n};\n\nexport const signupStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 600,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n    },\n  })\n);\n\nexport const SignupForm: React.FC<Props> = ({ onSubmit }) => {\n  const classes = signupStyles();\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          firstName: \"\",\n          lastName: \"\",\n          password: \"\",\n          passwordRepeat: \"\",\n          email: \"\",\n        }}\n        validationSchema={validationSchema}\n        onSubmit={async (data, { setSubmitting }) => {\n          setSubmitting(true);\n          onSubmit(data);\n          setSubmitting(false);\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <div className={classes.root}>\n              <Paper className={classes.paper}>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <MyTextField placeholder=\"first name\" name=\"firstName\" />\n                  </Grid>\n                  <Grid item xs>\n                    <MyTextField placeholder=\"last name\" name=\"lastName\" />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <MyTextField placeholder=\"email\" name=\"email\" />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <MyTextField\n                      placeholder=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3}>\n                  <Grid item xs>\n                    <MyTextField\n                      placeholder=\"re-enter password\"\n                      name=\"passwordRepeat\"\n                      type=\"password\"\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3} justify=\"center\">\n                  <Grid item>\n                    <Button\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                      variant=\"outlined\"\n                    >\n                      Sign up\n                    </Button>\n                  </Grid>\n                </Grid>\n                <Grid container spacing={3} justify=\"center\">\n                  <Grid item>\n                    <Link to=\"/login\" style={{ textDecoration: \"none\" }}>\n                      Back to Log In\n                    </Link>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { SignupForm } from \"../Forms/SignupForm\";\nimport {\n  MeQuery,\n  MeDocument,\n  useLoginMutation,\n  useRegisterUserMutation,\n} from \"../generated/graphql\";\nimport { setAccessToken } from \"../accessToken\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Auth } from \"../layouts/Auth\";\n\nexport const Signup: React.FC<RouteComponentProps> = ({ history }) => {\n  const [login] = useLoginMutation();\n  const [register] = useRegisterUserMutation();\n\n  const handleRegister = async (data: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n  }) => {\n    try {\n      await register({\n        variables: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email,\n          password: data.password,\n        },\n      });\n\n      const loginResponse = await login({\n        variables: {\n          email: data.email,\n          password: data.password,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<MeQuery>({\n            //updating the Apollo Cache\n            query: MeDocument,\n            data: {\n              me: data.login.user,\n            },\n          });\n        },\n      });\n\n      if (loginResponse && loginResponse.data) {\n        setAccessToken(loginResponse.data.login.accessToken);\n      }\n\n      history.push(\"/ok/dashboard\");\n    } catch (err) {\n      alert(err);\n    }\n  };\n  return (\n    <Auth page=\"Sign up\">\n      <SignupForm onSubmit={handleRegister} />\n    </Auth>\n  );\n};\n","import React from \"react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useMeQuery } from \"../../generated/graphql\";\nimport { Link } from \"react-router-dom\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerContainer: {\n      overflow: \"auto\",\n    },\n    link: {\n      textDecoration: \"none\",\n      color: theme.palette.text.primary,\n    },\n    iconic: {\n      color: theme.palette.secondary.main,\n    },\n  })\n);\n\nexport const Sidebar = () => {\n  const classes = useStyles();\n  const { data, loading } = useMeQuery();\n\n  let body: any = undefined;\n\n  if (!loading && data && data.me) {\n    body = data.me;\n  }\n\n  const routes1 = [\"/ok/dashboard\"];\n  const routes2 = [\"/ok/create_entry\", \"/ok/category_list\", \"/ok/settings\"];\n\n  const icons = (index: number) => {\n    switch (index) {\n      case 0:\n        return <MenuBookIcon />;\n      case 1:\n        return <ListIcon />;\n      default:\n        return <SettingsIcon />;\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      {!loading && body !== undefined ? (\n        <div>\n          <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n          >\n            <Toolbar />\n            <div className={classes.drawerContainer}>\n              <List>\n                {[\"Dashboard\"].map((text, index) => (\n                  <Link\n                    to={routes1[index]}\n                    className={classes.link}\n                    key={index}\n                  >\n                    <ListItem button key={index}>\n                      <ListItemIcon className={classes.iconic}>\n                        <DashboardIcon />\n                      </ListItemIcon>\n                      <ListItemText primary={text} />\n                    </ListItem>\n                  </Link>\n                ))}\n              </List>\n              <Divider />\n              <List>\n                {[\"Journal Entries\", \"Categories\"].map(\n                  (text, index) => (\n                    <Link\n                      to={routes2[index]}\n                      className={classes.link}\n                      key={index}\n                    >\n                      <ListItem button key={index}>\n                        <ListItemIcon className={classes.iconic}>\n                          {icons(index)}\n                        </ListItemIcon>\n                        <ListItemText primary={text} />\n                      </ListItem>\n                    </Link>\n                  )\n                )}\n              </List>\n            </div>\n          </Drawer>\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { Sidebar } from \"../components/Layout/Sidebar\";\nimport { Header } from \"../components/Layout/Header\";\n\nconst Root = styled.div`\n  padding-top: 90px;\n  padding-left: 265px;\n  padding-right: 25px;\n  display: flex;\n  min-height: 100%;\n`;\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n`;\n\nexport const Body: React.FC<any> = ({ children }) => {\n  return (\n    <>\n      <Root>\n        <CssBaseline />\n        <GlobalStyle />\n        {children}\n      </Root>\n      <Sidebar />\n      <Header />\n    </>\n  );\n};\n","// export const Colours = {\n//   primary: \"#31688F\",\n//   primaryLight: \"#DAE8F2\",\n//   secondary: \"#FB6656\"\n// }\n\nexport const Colours = {\n  primary: \"#0a80cc\",\n  primaryLight: \"#D8EEFC\",\n  secondary: \"#F35B50\"\n}","/**\n * This repo is lit\n * https://github.com/gregnb/mui-datatables\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport MUIDataTable from \"mui-datatables\";\nimport {\n  useGetAllUserEntriesQuery,\n  useDeleteEntryMutation,\n  GetUserCategoriesQuery,\n  GetUserCategoriesDocument,\n  GetAllUserEntriesQuery,\n  GetAllUserEntriesDocument,\n  useGetUserCategoriesQuery,\n} from \"../../generated/graphql\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Chip,\n  IconButton,\n  CircularProgress,\n  useTheme,\n} from \"@material-ui/core\";\nimport { Category, JournalEntry } from \"../../redux/types\";\nimport { setSelectedCategory } from \"../../redux/actions\";\nimport { setEntryToEdit } from \"../../redux/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport { RootState } from \"../../redux/reducers\";\nimport { Colours } from \"../../styles/Colours\";\n\nexport const EntryTable = () => {\n  const [entries, setEntries] = useState<Array<Array<string>>>([]);\n  const [categories, setCategories] = useState<Array<Category>>([]);\n  const [edit, setEdit] = useState<JournalEntry | undefined>(undefined);\n  const {\n    loading: entryLoading,\n    data: entryData,\n  } = useGetAllUserEntriesQuery();\n  const {\n    loading: categoryLoading,\n    data: categoryData,\n  } = useGetUserCategoriesQuery();\n  const [deleteEntry] = useDeleteEntryMutation();\n  const dispatch = useDispatch();\n  const editEntry = useSelector(\n    (state: RootState) => state.editEntry.editEntry\n  );\n  const theme = useTheme();\n\n  useEffect(() => {\n    setEdit(editEntry);\n  }, [editEntry]);\n\n  const columns = [\n    {\n      name: \"Title\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      name: \"Date\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      name: \"Duration\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      name: \"Category\",\n      options: {\n        filter: true,\n        customBodyRender: (value: string, tableMeta: any, updateValue: any) => {\n          const handleClick = () => {\n            const cat = categories.find((cat) => cat.id === parseInt(value));\n            dispatch(setSelectedCategory(cat));\n          };\n          return (\n            <Link to=\"/ok/category_list\" style={{ textDecoration: \"none\" }}>\n              <Chip\n                color=\"primary\"\n                style={{ color: theme.palette.text.primary }}\n                variant=\"outlined\"\n                size=\"small\"\n                label={\n                  categories.find((category) => parseInt(value) === category.id)\n                    ?.description\n                }\n                onClick={handleClick}\n              />\n            </Link>\n          );\n        },\n      },\n    },\n    {\n      name: \"Additional Notes\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      name: \"Edit\",\n      options: {\n        filter: false,\n        sort: false,\n        customBodyRender: (value: string, tableMeta: any, updateValue: any) => {\n          const handleClick = () => {\n            const entry: any = entryData!.getAllUserEntries.find(\n              (elem) => parseInt(value) === elem.id\n            );\n            console.log(editEntry);\n            dispatch(setEntryToEdit(entry));\n          };\n\n          return (\n            <div>\n              {edit && parseInt(value) === edit.id! ? (\n                <IconButton aria-label=\"edit\" size=\"small\">\n                  <CreateIcon style={{ color: Colours.secondary }} />\n                </IconButton>\n              ) : (\n                <IconButton\n                  aria-label=\"edit\"\n                  size=\"small\"\n                  onClick={handleClick}\n                >\n                  <CreateIcon style={{ color: theme.palette.text.secondary }} />\n                </IconButton>\n              )}\n            </div>\n          );\n        },\n      },\n    },\n  ];\n\n  const [deletingItems, setDeletingItems] = useState(false);\n\n  const options = {\n    elevation: 1,\n    print: false,\n    onRowsDelete: async (row: any) => {\n      // entry list is reversed because we want to see most recently added entries first.\n      setDeletingItems(true);\n      const reversedEntries = entryData!.getAllUserEntries.slice().reverse();\n      let toDelete = [];\n      for (let i = 0; i < row.data.length; i++) {\n        toDelete.push(reversedEntries[row.data[i].dataIndex].id);\n      }\n      await handleDelete(toDelete);\n      setDeletingItems(false);\n    },\n    textLabels: {\n      body: {\n        noMatch: \"No entries found\",\n      },\n    },\n    customSort: (data: any[], dataIndex: number, rowIndex: string) => {\n      switch (dataIndex) {\n        case 1:\n          return data.sort((a, b) => {\n            const dateA = new Date(a.data[dataIndex]).getTime();\n            const dateB = new Date(b.data[dataIndex]).getTime();\n            return (dateA < dateB ? -1 : 1) * (rowIndex === \"desc\" ? 1 : -1);\n          });\n        case 2:\n          return data.sort((a, b) => {\n            const timeA = a.data[dataIndex]\n            const timeB = b.data[dataIndex]\n            return (timeA < timeB ? -1 : 1) * (rowIndex === \"desc\" ? 1 : -1);\n          });\n        case 3:\n          return data.sort((a, b) => {\n            const catA = a.data[dataIndex];\n            const catB = b.data[dataIndex];\n            return (\n              (categories\n                .find((cat) => cat.id === catA)!\n                .description.charAt(0)\n                .toUpperCase()\n                .charCodeAt(0) <\n              categories\n                .find((cat) => cat.id === catB)!\n                .description.charAt(0)\n                .toUpperCase()\n                .charCodeAt(0)\n                ? -1\n                : 1) * (rowIndex === \"desc\" ? 1 : -1)\n            );\n          });\n        default:\n          return data.sort((a, b) => {\n            return (\n              (a.data[dataIndex].length < b.data[dataIndex].length ? -1 : 1) *\n              (rowIndex === \"desc\" ? 1 : -1)\n            );\n          });\n      }\n    },\n    // selectableRows: \"none\" as any,\n  };\n\n  const handleDelete = async (idArray: number[]) => {\n    await deleteEntry({\n      variables: {\n        idArray,\n      },\n      update: (store, { data }) => {\n        if (!data) {\n          return null;\n        }\n        store.writeQuery<GetUserCategoriesQuery>({\n          query: GetUserCategoriesDocument,\n          data: {\n            getUserCategories: data.deleteEntry.categories,\n          },\n        });\n        store.writeQuery<GetAllUserEntriesQuery>({\n          query: GetAllUserEntriesDocument,\n          data: {\n            getAllUserEntries: data.deleteEntry.entries,\n          },\n        });\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (!categoryLoading && categoryData && categoryData.getUserCategories) {\n      setCategories(categoryData.getUserCategories);\n    }\n  }, [categoryData]);\n\n  useEffect(() => {\n    fillTable();\n  }, [entryData]);\n\n  const fillTable = () => {\n    if (!entryLoading && entryData && entryData.getAllUserEntries) {\n      let final: any[] = [];\n      entryData.getAllUserEntries.map((element) => {\n        let arr: any[] = [];\n        arr.push(element.title);\n        arr.push(element.date!);\n        arr.push(element.duration);\n        arr.push(element.categoryId);\n        arr.push(element.notes ? element.notes : \"\");\n        arr.push(element.id);\n        final.push(arr);\n      });\n\n      // entry list is reversed because we want to see most recently added entries first. This affects delete.\n      setEntries(final.reverse());\n    }\n  };\n\n  const loadingComponent = (\n    <div\n      style={{\n        position: \"absolute\",\n        zIndex: 110,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        background: \"rgba(255,255,255,0.8)\",\n      }}\n    >\n      <CircularProgress size={24} />\n    </div>\n  );\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      {deletingItems && loadingComponent}\n      <MUIDataTable\n        title={\"Entries\"}\n        data={entries}\n        columns={columns}\n        options={options}\n      />\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport PublishIcon from \"@material-ui/icons/Publish\";\n\nimport {\n  useGetUserCategoriesQuery,\n  useBatchUploadJournalEntryMutation,\n  EntryInput,\n  GetUserCategoriesQuery,\n  GetUserCategoriesDocument,\n  GetAllUserEntriesQuery,\n  GetAllUserEntriesDocument,\n} from \"../../generated/graphql\";\nimport { getCurrentDayTimestamp } from \"../../Functions/dataProcessing\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n    input: {\n      display: \"none\",\n    },\n    button: {\n      margin: theme.spacing(1),\n    },\n  })\n);\n\nexport const UploadCSV = () => {\n  const classes = useStyles();\n  const [values, setValues] = useState<any>(\"\");\n  const { loading, data } = useGetUserCategoriesQuery();\n  const [batchUpload] = useBatchUploadJournalEntryMutation();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files) {\n      const csvFile = event.currentTarget.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        setValues(reader.result);\n      };\n      reader.readAsText(csvFile);\n    }\n  };\n\n  // https://stackoverflow.com/questions/19156148/i-want-to-remove-double-quotes-from-a-string\n  useEffect(() => {\n    if (values && !loading && data && data.getUserCategories) {\n      const parsedArray: string[] = values\n        .split(/\\r\\n|\\r|\\n/)\n        .join()\n        .split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      for (let i = 0; i < parsedArray.length; i++) {\n        let str = parsedArray[i];\n        if (str.charAt(0) === `\"` && str.charAt(str.length - 1) === `\"`) {\n          const arr = str.split(`\"`);\n          let result = \"\";\n          for (let phrase of arr) {\n            if (phrase !== \"\") {\n              result = result.concat(phrase);\n            }\n          }\n          parsedArray[i] = result;\n        }\n      }\n\n      let arr: Array<Array<any>> = [];\n\n      for (let i = 0; i < parsedArray.length; ) {\n        let temp = [];\n        for (let j = 0; j < 6; j++, i++) {\n          temp.push(parsedArray[i]);\n        }\n        arr.push(temp);\n      }\n\n      let entryArray: EntryInput[] = [];\n      let categoryList: string[] = [];\n\n      // setting categories to infinity so that backend can deal\n      for (let i = 1; i < arr.length; i++) {\n        entryArray.push({\n          id: 0,\n          title: arr[i][0],\n          date: getCurrentDayTimestamp(new Date(arr[i][1])),\n          duration: parseInt(arr[i][2]),\n          categoryId: 0,\n          notes: arr[i][4],\n        });\n        categoryList.push(arr[i][3]);\n      }\n      uploadFileToServer(entryArray, categoryList);\n    }\n  }, [values]);\n\n  const uploadFileToServer = async (\n    entryArray: EntryInput[],\n    categoryList: string[]\n  ) => {\n    try {\n      await batchUpload({\n        variables: {\n          entryArray: entryArray,\n          categoryArray: categoryList,\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.batchUploadJournalEntry.categories,\n            },\n          });\n          store.writeQuery<GetAllUserEntriesQuery>({\n            query: GetAllUserEntriesDocument,\n            data: {\n              getAllUserEntries: data.batchUploadJournalEntry.entries,\n            },\n          });\n        },\n      });\n    } catch (err) {\n      console.log(err + \": this is on the frontend\");\n    }\n  };\n\n  const downloadTemplate = () => {\n    window.open(\n      \"https://drive.google.com/file/d/1dIkm_CguJ2GwPK9yekfVuJ85wpd_B06E/view?usp=sharing\"\n    );\n  };\n\n  return (\n    <div className={classes.root}>\n      <Button\n        variant=\"outlined\"\n        color=\"inherit\"\n        className={classes.button}\n        startIcon={<GetAppIcon />}\n        component=\"span\"\n        onClick={downloadTemplate}\n      >\n        Open Template\n      </Button>\n      <input\n        accept=\".csv\"\n        className={classes.input}\n        id=\"contained-button-file\"\n        multiple\n        onChange={(e) => handleChange(e)}\n        type=\"file\"\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button\n          variant=\"outlined\"\n          color=\"inherit\"\n          className={classes.button}\n          startIcon={<PublishIcon />}\n          component=\"span\"\n        >\n          Upload CSV\n        </Button>\n      </label>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CreateEntryForm } from \"../Forms/CreateEntryForm\";\nimport {\n  Grid,\n  makeStyles,\n  Theme,\n  createStyles,\n  Paper,\n  Snackbar,\n} from \"@material-ui/core\";\nimport {\n  useCreateEntryMutation,\n  GetUserCategoriesDocument,\n  GetUserCategoriesQuery,\n  GetAllUserEntriesQuery,\n  GetAllUserEntriesDocument,\n  useEditEntryMutation,\n} from \"../generated/graphql\";\nimport { JournalEntry } from \"../redux/types\";\nimport { EntryTable } from \"../components/JournalEntries/EntryTable\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { UploadCSV } from \"../components/JournalEntries/UploadCSV\";\nimport { getCurrentDayTimestamp } from \"../Functions/dataProcessing\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      width: \"100%\",\n      color: theme.palette.text.secondary,\n    },\n    button: {\n      textAlign: \"center\",\n    },\n  })\n);\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport const CreateEntry = () => {\n  const classes = useStyles();\n  const [createEntry] = useCreateEntryMutation();\n  const [editEntry] = useEditEntryMutation();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleSubmit = async (data: JournalEntry) => {\n    try {\n      const response = await createEntry({\n        variables: {\n          categoryId: data.categoryId,\n          title: data.title,\n          notes: data.notes,\n          duration: data.duration,\n          date: getCurrentDayTimestamp(new Date(data.date)),\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.createEntry.categories,\n            },\n          });\n          store.writeQuery<GetAllUserEntriesQuery>({\n            query: GetAllUserEntriesDocument,\n            data: {\n              getAllUserEntries: data.createEntry.entries,\n            },\n          });\n        },\n      });\n      if (!response) {\n        alert(\"Failed to add.\");\n        return;\n      }\n      handleClick();\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const handleEdit = async (id: number, data: JournalEntry) => {\n    try {\n      const response = await editEntry({\n        variables: {\n          id: id,\n          categoryId: data.categoryId,\n          title: data.title,\n          notes: data.notes,\n          duration: data.duration,\n          date: getCurrentDayTimestamp(new Date(data.date)),\n        },\n        update: (store, { data }) => {\n          if (!data) {\n            return null;\n          }\n          store.writeQuery<GetUserCategoriesQuery>({\n            query: GetUserCategoriesDocument,\n            data: {\n              getUserCategories: data.editEntry.categories,\n            },\n          });\n          store.writeQuery<GetAllUserEntriesQuery>({\n            query: GetAllUserEntriesDocument,\n            data: {\n              getAllUserEntries: data.editEntry.entries,\n            },\n          });\n        },\n      });\n      if (!response) {\n        alert(\"Failed to edit.\");\n        return;\n      }\n      handleClick();\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={3}>\n          <Typography variant=\"h4\">Journal Entries</Typography>\n        </Grid>\n        <Grid item xs={9} style={{ textAlign: \"right\" }}>\n          <UploadCSV />\n        </Grid>\n        <Grid item xs sm={12} md={12} lg={3} xl={3}>\n          <Paper className={classes.paper}>\n            <CreateEntryForm onSubmit={handleSubmit} onEdit={handleEdit} />\n          </Paper>\n        </Grid>\n        <Grid item xs sm={12} md={12} lg={9} xl={9}>\n          <EntryTable />\n        </Grid>\n      </Grid>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          Entry successfully added!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport { Dashboard } from \"./App/Dashboard\";\nimport { Login } from \"./Auth/Login\";\nimport { Signup } from \"./Auth/Signup\";\nimport { Body } from \"./layouts/Body\";\nimport { CreateEntry } from \"./App/JournalEntries\";\nimport { CategoryList } from \"./App/CategoryList\";\nimport { Settings } from \"./App/Settings\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport { Colours } from \"./styles/Colours\";\nimport { blueGrey, cyan } from \"@material-ui/core/colors\";\nimport { useMeQuery } from \"./generated/graphql\";\n\nconst lightTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: Colours.primary,\n      light: Colours.primaryLight,\n    },\n    secondary: {\n      main: Colours.secondary,\n      light: Colours.primary,\n    },\n  },\n});\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blueGrey[100],\n      light: cyan[900],\n    },\n    secondary: {\n      main: blueGrey[200],\n      light: cyan[900],\n    },\n    background: {\n      default: \"#151C1F\",\n      paper: blueGrey[900],\n    },\n    text: {\n      primary: \"#ffffff\",\n      secondary: blueGrey[200],\n    },\n  },\n});\n\nexport const Routes: React.FC = () => {\n  const [theme, setTheme] = useState<any>(lightTheme);\n  const { loading, data } = useMeQuery();\n\n  useEffect(() => {\n    updateTheme();\n  }, [data, loading]);\n\n  const updateTheme = () => {\n    if (\n      !loading &&\n      data !== undefined &&\n      data.me !== null &&\n      data.me !== undefined\n    ) {\n      if (data.me.theme === \"light\") {\n        setTheme(lightTheme);\n      }\n\n      if (data.me.theme === \"dark\") {\n        setTheme(darkTheme);\n      }\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/login\" />\n          </Route>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route\n            path=\"/ok/dashboard\"\n            render={() => (\n              <Body>\n                <Dashboard />\n              </Body>\n            )}\n          />\n          <Route\n            path=\"/ok/create_entry\"\n            render={() => (\n              <Body>\n                <CreateEntry />\n              </Body>\n            )}\n          />\n          <Route\n            path=\"/ok/category_list\"\n            render={() => (\n              <Body>\n                <CategoryList />\n              </Body>\n            )}\n          />\n          {/* <Route\n            path=\"/ok/settings\"\n            render={() => (\n              <Body>\n                <Settings />\n              </Body>\n            )}\n          /> */}\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Routes } from \"./Routes\";\nimport { setAccessToken } from \"./accessToken\";\n\nexport const App = () => {\n  const [loadPage, setLoadPage] = useState(true);\n\n  useEffect(() => {\n    fetch(\"/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\",\n    }).then(async (x) => {\n      const { accessToken } = await x.json();\n      setAccessToken(accessToken);\n      setLoadPage(false);\n    });\n  }, []);\n\n  if (loadPage) {\n    return <div>loading...</div>;\n  }\n\n  return <Routes />;\n};\n","import { SetSelectedCategoryAction } from \"../actions\";\nimport { Category } from \"../types\";\n\nexport interface CategoryState {\n  selectedCategory: Category | undefined;\n}\n\nconst initialState = {\n  selectedCategory: undefined,\n};\n\nexport const categoriesReducer = (\n  state: CategoryState = initialState,\n  action: SetSelectedCategoryAction\n) => {\n  switch (action.type) {\n    case \"SET_SELECTED_CATEGORY\": {\n      return {\n        ...state,\n        selectedCategory: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { SetEntryToEditAction } from \"../actions\";\nimport { JournalEntry } from \"../types\";\n\nexport interface EntryState {\n  editEntry: JournalEntry | undefined;\n}\n\nconst initialState = {\n  editEntry: undefined,\n};\n\nexport const editEntryReducer = (\n  state: EntryState = initialState,\n  action: SetEntryToEditAction\n) => {\n  switch (action.type) {\n    case \"SET_ENTRY_TO_EDIT\": {\n      return {\n        ...state,\n        editEntry: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { SetCalendarViewAction } from \"../actions\";\n\nexport interface CalendarState {\n  view: boolean;\n}\n\nconst initialState = {\n  view: false,\n};\n\nexport const calendarReducer = (\n  state: CalendarState = initialState,\n  action: SetCalendarViewAction\n) => {\n  switch (action.type) {\n    case \"SET_CALENDAR_VIEW\": {\n      return {\n        ...state,\n        view: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { SetThemeAction } from \"../actions\";\n\nexport interface ThemeState {\n  theme: boolean;\n}\n\nconst initialState = {\n  theme: false,\n};\n\nexport const themeReducer = (\n  state: ThemeState = initialState,\n  action: SetThemeAction\n) => {\n  switch (action.type) {\n    case \"SET_THEME\": {\n      return {\n        ...state,\n        theme: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { categoriesReducer } from \"./categoriesReducer\";\nimport { editEntryReducer } from \"./editEntryReducer\";\nimport { calendarReducer } from \"./calendarReducer\";\nimport { themeReducer } from \"./themeReducer\";\n\nexport const rootReducer = combineReducers({\n  activeCategory: categoriesReducer,\n  editEntry: editEntryReducer,\n  calendarView: calendarReducer,\n  theme: themeReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  ApolloLink,\n  HttpLink,\n  Observable,\n} from \"@apollo/client\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { App } from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `bearer ${accessToken}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n      accessTokenField: \"accessToken\",\n      isTokenValidOrUndefined: () => {\n        const token = getAccessToken();\n        if (!token) {\n          return true;\n        }\n\n        try {\n          const { exp } = jwtDecode(token);\n          if (Date.now() >= exp * 1000) {\n            return false;\n          } else {\n            return true;\n          }\n        } catch {\n          return false;\n        }\n      },\n      fetchAccessToken: async () => {\n        return await fetch(\"/refresh_token\", {\n          method: \"POST\",\n          credentials: \"include\",\n        });\n      },\n      handleFetch: (accessToken) => {\n        setAccessToken(accessToken);\n      },\n      handleError: (err) => {\n        console.warn(\"Your refresh token is invalid. Try to relogin\");\n        console.error(err);\n      },\n    }),\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n      if (graphQLErrors && graphQLErrors[0].message === \"Error: UNAUTHENTICATED\") {\n        if (window.location.pathname !== \"/login\" && window.location.pathname !== \"/signup\") {\n          window.location.pathname = \"/\";\n        }\n      }\n    }),\n    requestLink,\n    new HttpLink({\n      uri: \"/graphql\",\n      credentials: \"include\",\n    }),\n  ]),\n  cache,\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}